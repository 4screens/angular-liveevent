{"version":3,"sources":["/source/header.ts","liveevent.js","/source/liveevent/liveevent.ts","/source/chat/chat.ts","/source/bootstrap.ts","/source/util/event.ts"],"names":["angular","Liveevent","app","module","Liveevent.Liveevent","Liveevent.Liveevent.constructor","Liveevent.Liveevent.updatePage","this","Liveevent.Liveevent.removePage","Extension","Liveevent.Liveevent.updateQuiz","Liveevent.Liveevent.removeQuiz","Liveevent.Liveevent.initChat","Liveevent.Liveevent.initSocket","_this","Liveevent.Liveevent.getById","Liveevent.Liveevent.getPageById","$http","get","url","then","res","indexOf","status","console","log","data","Liveevent.Liveevent.init","Liveevent_1","ChatModule","ChatModule.Chat","ChatModule.Chat.constructor","Chat","ChatModule.Chat.login","ChatModule.Chat.logout","ChatModule.Chat.updateChat","ChatModule.Chat.sendMsg","msg","ChatModule.Chat.getMsgs","ChatModule.Chat.initSocket","ChatModule.Chat.init","Extension.constructor","Extension.init","$inject","service","Util","Util.Event","Util.Event.constructor","Event","Util.Event.listen","Util.Event.trigger","_i","arguments"],"mappings":"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","file":"liveevent.min.js","sourcesContent":["/*!\n * 4screens-angular-liveevent v0.1.20\n * (c) 2015 Nopattern sp. z o.o.\n * License: proprietary\n */\n","(function(angular) {\n/*!\n * 4screens-angular-liveevent v0.1.20\n * (c) 2015 Nopattern sp. z o.o.\n * License: proprietary\n */\n\n/// <reference path=\"../typings/tsd.d.ts\" />\nvar app = angular.module('4screens.liveevent', ['LocalStorageModule']);\n\n/// <reference path=\"iliveevent.ts\" />\nvar Liveevent;\n(function (Liveevent_1) {\n    var Liveevent = (function () {\n        function Liveevent() {\n            console.log('[ Liveevent ] Constructor');\n            this.event = new Util.Event();\n        }\n        Liveevent.prototype.updatePage = function (page) {\n            var _this = this;\n            console.log('[ Liveevent ] Update Page: ' + page._id, this.currentEngageform.navigation);\n            var __type = this.activePage ? (this.activePage.type + '') : null;\n            // Check if form and if so, send all inputs\n            if (__type && __type.indexOf('form') > -1) {\n                this.currentEngageform.navigation.pick(null, null, { quiet: true });\n            }\n            this.activePage = page;\n            this.activePageId = page._id;\n            this.currentEngageform.message = null;\n            this.currentEngageform.initPage(page);\n            // Add liveSettings\n            this.currentEngageform.liveSettings = page.liveSettings;\n            // Overwrite navigation\n            this.currentEngageform.navigation.enabled = false;\n            this.currentEngageform.navigation.position = 0;\n            this.currentEngageform.navigation.size = 1;\n            this.currentEngageform.navigation.hasStart = false;\n            this.currentEngageform.navigation.enabledStart = false;\n            this.currentEngageform.navigation.hasPrev = false;\n            this.currentEngageform.navigation.enabledPrev = false;\n            this.currentEngageform.navigation.hasNext = false;\n            this.currentEngageform.navigation.enabledNext = false;\n            this.currentEngageform.navigation.hasFinish = false;\n            this.currentEngageform.navigation.enabledFinish = false;\n            this.currentEngageform.navigation.distance = 0;\n            this.currentEngageform.navigation.prev = function ($event) { return; };\n            this.currentEngageform.navigation.next = function ($event, vcase) { return; };\n            this.currentEngageform.navigation.start = function ($event) { return; };\n            this.currentEngageform.navigation.finish = function ($event, vcase) { return; };\n            // Block pick if answers are not allowed\n            this.currentEngageform.navigation.pick = function (e, n, r) {\n                if (_this.currentEngageform.liveSettings.acceptResponses) {\n                    _this.currentEngageform.navigation.truePick(e, n, r);\n                }\n                else {\n                    _this.currentEngageform.message = 'Answers are currently not acceptabe';\n                }\n            };\n        };\n        Liveevent.prototype.removePage = function () {\n            var _this = this;\n            console.log('[ Liveevent ] Remove page');\n            Extension.$timeout(function () {\n                _this.activePage = null;\n                _this.activePageId = null;\n                if (_this.currentEngageform) {\n                    _this.currentEngageform.current = null;\n                    _this.currentEngageform.message = null;\n                }\n            });\n        };\n        Liveevent.prototype.updateQuiz = function (EF) {\n            this.currentEngageform = EF;\n            console.log('[ Liveevent ] Update Quiz: ' + this.currentEngageform._engageformId);\n            this.currentEngageform.navigation.truePick = this.currentEngageform.navigation.pick;\n            this.activeQuiz = this.currentEngageform;\n            this.activeQuizId = this.currentEngageform._engageformId;\n        };\n        Liveevent.prototype.removeQuiz = function () {\n            var _this = this;\n            console.log('[ Liveevent ] Remove quiz');\n            Extension.$timeout(function () {\n                _this.activeQuiz = null;\n                _this.activeQuizId = null;\n                _this.currentEngageform = null;\n                if (_this.currentEngageform) {\n                    _this.currentEngageform.branding = null;\n                    _this.currentEngageform.current = null;\n                    _this.currentEngageform.message = null;\n                    _this.currentEngageform.meta = null;\n                    _this.currentEngageform.navigation = null;\n                    _this.currentEngageform.theme = null;\n                    _this.currentEngageform.title = null;\n                    _this.currentEngageform.type = null;\n                }\n            });\n        };\n        // Init chat\n        Liveevent.prototype.initChat = function (id) {\n            var deferred = Extension.$q.defer();\n            if (!this.chat && id) {\n                this.chat = new ChatModule.Chat(id, this);\n                return this.chat.init();\n            }\n            else {\n                // If it is already initialised (meaning it's available on this instance), return a fake promise that\n                // is here just to make the API looks better.\n                deferred.resolve();\n                return deferred.promise;\n            }\n        };\n        // Sockets\n        Liveevent.prototype.initSocket = function (opts) {\n            var _this = this;\n            console.log('[ Liveevent ] Init socket');\n            var url = Extension.config.backend.socket + Extension.config.liveEvent.socketNamespace;\n            url = url.replace(':liveEventId', opts.id);\n            this.socket = Extension.io.connect(url, { 'force new connection': true });\n            this.socket.on('connect', function () {\n                console.log('[ Liveevent:Socket ] Connected');\n                _this.socket.emit('getStatus', { liveEventId: opts.id });\n            });\n            this.socket.on('disconnect', this.initSocket);\n            this.socket.on('error', function (res) {\n                console.warn('[ Liveevent:Socket ] Error: ' + res);\n            });\n            this.socket.on('liveEventStatus', function (data) {\n                // Liveevent is off\n                if (!data.isActive) {\n                    console.log('[ Liveevent:Socket ] Liveevent is not active');\n                    _this.removePage();\n                    _this.removeQuiz();\n                    return;\n                }\n                if (data.activeQuestionId !== _this.activePageId || data.activeQuizId !== _this.activeQuizId) {\n                    // Quiz is off\n                    if (!data.activeQuizId) {\n                        console.log('[ Liveevent ] Quiz is empty');\n                        _this.removeQuiz();\n                        return;\n                    }\n                    _this.EF.init({ id: data.activeQuizId, mode: 'default' }).then(function (res) {\n                        _this.currentEngageform = res;\n                        console.log('[eform]', _this.currentEngageform);\n                    });\n                    // Page is off\n                    if (!data.activeQuestionId) {\n                        console.log('[ Liveevent ] Page is empty');\n                        _this.removePage();\n                        return;\n                    }\n                    // Quiz changed\n                    if (data.activeQuizId !== _this.activeQuizId) {\n                        console.log('[ Liveevent:Socket ] Quiz changed');\n                        _this.EF.init({ id: data.activeQuizId, mode: 'default' }).then(function (res) {\n                            _this.updateQuiz(res);\n                            // Update Page\n                            _this.getPageById(data.activeQuestionId).then(function (page) {\n                                _this.updatePage(page);\n                            });\n                        });\n                    }\n                    else {\n                        // Only Page changed\n                        console.log('[ Liveevent:Socket ] Only Page changed');\n                        _this.getPageById(data.activeQuestionId).then(function (page) {\n                            _this.updatePage(page);\n                        });\n                    }\n                }\n                // Quiz and page is same, check if showAnswers or acceptResponses had change\n                if (_this.currentEngageform) {\n                    if (data.showAnswers !== _this.currentEngageform.liveSettings.showAnswers) {\n                        console.log('[ Liveevent ] Show answer option changed');\n                        Extension.$timeout(function () {\n                            _this.currentEngageform.liveSettings.showAnswers = data.showAnswers;\n                        });\n                    }\n                    if (data.acceptResponses !== _this.currentEngageform.liveSettings.acceptResponses) {\n                        console.log('[ Liveevent ] Accept responses option changed');\n                        Extension.$timeout(function () {\n                            _this.currentEngageform.liveSettings.acceptResponses = data.acceptResponses;\n                            _this.currentEngageform.message = '';\n                        });\n                    }\n                }\n            });\n            this.socket.on('multipleChoiceQuestionAnswers', function (data) {\n                _this.currentEngageform.updateAnswers(data);\n            });\n        };\n        // Get Liveevent\n        Liveevent.prototype.getById = function (id) {\n            var url = Extension.config.backend.domain + Extension.config.liveEvent.liveEventUrl;\n            url = url.replace(':liveEventId', id);\n            // TODO: Get quiz and current question\n            return Extension.$http.get(url).then(function (res) {\n                if ([200, 304].indexOf(res.status) !== -1) {\n                    return res.data;\n                }\n                return Extension.$q.reject(res);\n            });\n        };\n        // Get Page\n        Liveevent.prototype.getPageById = function (questionId) {\n            var url = Extension.config.backend.domain + Extension.config.liveEvent.activeQuestion;\n            url = url.replace(':questionId', questionId);\n            return Extension.$http.get(url).then(function (res) {\n                if ([200, 304].indexOf(res.status) !== -1) {\n                    console.log('[ Liveevent ] Get PAGE: ' + res.data['_id']);\n                    return res.data;\n                }\n                this.$q.reject(res);\n            });\n        };\n        Liveevent.prototype.init = function (opts) {\n            var _this = this;\n            console.log('[ Liveevent ] Init: ' + opts.id);\n            var deferred = Extension.$q.defer();\n            this.id = opts.id;\n            this.EF = opts.engageform;\n            // Get Liveevent\n            this.getById(opts.id).then(function (res) {\n                // Init socket\n                _this.initSocket(opts);\n                // Init chat\n                _this.initChat(res.chatId).then(function () {\n                    // ...\n                });\n                deferred.resolve(_this);\n            });\n            return deferred.promise;\n        };\n        return Liveevent;\n    })();\n    Liveevent_1.Liveevent = Liveevent;\n})(Liveevent || (Liveevent = {}));\n\n/// <reference path=\"ichat.ts\" />\nvar ChatModule;\n(function (ChatModule) {\n    var Chat = (function () {\n        function Chat(id, liveevent) {\n            this.messages = [];\n            console.log('[ Chat ] Constructor');\n            this.id = id;\n            this._liveevent = liveevent;\n        }\n        Chat.prototype.login = function (data, dataMe) {\n            this.user = {\n                accessToken: data.accessToken,\n                user: data.userID,\n                userLink: dataMe.link,\n                userName: dataMe.name,\n                userID: data.userID\n            };\n        };\n        Chat.prototype.logout = function () {\n            this.user = null;\n        };\n        Chat.prototype.updateChat = function (data) {\n            console.log('[ Chat ] Update chat');\n            this.id = data.id;\n            this.name = data.name;\n            this.premoderated = data.premoderated;\n            this.direction = data.chatDirection;\n            this.theme = data.theme;\n            // Get some old msgs\n            this.getMsgs();\n        };\n        Chat.prototype.sendMsg = function (m) {\n            console.log('[ Chat ] Posting msg');\n            if (!this.user)\n                return;\n            var url = Extension.config.backend.domain + Extension.config.chat.sendUrl, msg;\n            url = url.replace(':chatId', this.id);\n            msg = {\n                accessToken: this.user.accessToken,\n                date: Date.now(),\n                hidden: false,\n                id: this.user.userId,\n                msg: m,\n                user: this.user.user,\n                userLink: this.user.userLink,\n                userName: this.user.userName\n            };\n            return Extension.$http.post(url, msg);\n        };\n        Chat.prototype.getMsgs = function () {\n            var _this = this;\n            console.log('[ Chat ] Get old msgs');\n            var url = Extension.config.backend.domain + Extension.config.chat.messagesUrl;\n            url = url.replace(':chatId', this.id);\n            return Extension.$http.get(url).then(function (res) {\n                //console.log('[ Chat ] Got ' + res.data.length + ' msgs');\n                _this.messages = res.data;\n                if (_this.messages.length) {\n                    // Sort by newest\n                    _this.messages = _.sortBy(_this.messages, 'date').reverse();\n                    // Reverse msg order\n                    if (_this.direction && _this.direction === 'ttb') {\n                        _this.messages.reverse();\n                    }\n                }\n            });\n        };\n        Chat.prototype.initSocket = function () {\n            var _this = this;\n            console.log('[ Chat:Socket ] Init socket');\n            var url = Extension.config.backend.socket;\n            this.socket = Extension.io.connect(url, { 'force new connection': true });\n            this.socket.on('error', function (res) {\n                console.warn(res);\n            });\n            this.socket.on('connect', function (data) {\n                console.log('[ Chat:Socket ] Connected');\n                // Join room\n                _this.socket.emit('joinRoom', _this.id);\n                // We can also leave room, to do so just emit 'leaveRoom' with roomId as param\n            });\n            // New msg event\n            this.socket.on('msg', function (data) {\n                console.log('[ Chat:Socket ] New msg');\n                _this._liveevent.event.trigger('chat::message', _this._liveevent.id, data);\n                Extension.$rootScope.$apply(function () {\n                    if (_this.direction && _this.direction === 'ttb') {\n                        _this.messages.push(data);\n                    }\n                    else {\n                        _this.messages.unshift(data);\n                    }\n                });\n            });\n            this.socket.on('msgHide', function (id) {\n                console.log('[ Chat:Socket] Hide msg');\n                var messageIndex = _this.messages.length;\n                for (var i = 0; i < _this.messages.length; i += 1) {\n                    if (_this.messages[i].id === id) {\n                        messageIndex = i;\n                    }\n                }\n                Extension.$rootScope.$apply(function () {\n                    _this.messages.splice(messageIndex, 1);\n                });\n            });\n            // On disconect\n            this.socket.on('disconnect', this.initSocket);\n        };\n        Chat.prototype.init = function () {\n            var _this = this;\n            console.log('[ Chat ] Init: ' + this.id);\n            // Get chat details\n            var url = Extension.config.backend.domain + Extension.config.chat.detailUrl;\n            url = url.replace(':chatId', this.id);\n            return Extension.$http.get(url).then(function (res) {\n                _this.updateChat(res.data);\n                _this.initSocket();\n                return res;\n            });\n        };\n        return Chat;\n    })();\n    ChatModule.Chat = Chat;\n})(ChatModule || (ChatModule = {}));\n\n/// <reference path=\"api/api.ts\" />\n/// <reference path=\"liveevent/liveevent.ts\" />\n/// <reference path=\"chat/chat.ts\" />\nvar Extension = (function () {\n    function Extension($http, $q, $timeout, localStorage, $rootScope, ApiConfig) {\n        Extension.$http = $http;\n        Extension.$timeout = $timeout;\n        Extension.$q = $q;\n        Extension.localStorage = localStorage;\n        Extension.config = ApiConfig;\n        Extension.$rootScope = $rootScope;\n    }\n    Extension.prototype.init = function (opts) {\n        if (Extension._instances[opts.id]) {\n            return Extension._instances[opts.id];\n        }\n        Extension.io = opts.io;\n        var liveEvent = new Liveevent.Liveevent();\n        return Extension._instances[opts.id] = liveEvent.init(opts);\n    };\n    Extension._instances = {};\n    return Extension;\n})();\nExtension.$inject = ['$http', '$q', '$timeout', 'localStorageService', '$rootScope', 'ApiConfig'];\napp.service('Liveevent', Extension);\n\n/// <reference path=\"api/iembed.ts\" />\n/// <reference path=\"api/iquizquestion.ts\" />\n/// <reference path=\"api/iquizquestionsres.ts\" />\n/// <reference path=\"api/iquizquestionanswer.ts\" />\n/// <reference path=\"api/iquizquestionanswerres.ts\" />\n/// <reference path=\"api/iquiz.ts\" />\n/// <reference path=\"api/iquizres.ts\" />\n/// <reference path=\"api/iquizfinish.ts\" />\n/// <reference path=\"api/iquizfinishres.ts\" />\n/// <reference path=\"page/enum.ts\" />\n/// <reference path=\"page/icase.ts\" />\n/// <reference path=\"page/ipage.ts\" />\n/// <reference path=\"page/ipages.ts\" />\n/// <reference path=\"page/ipagesent.ts\" />\n/// <reference path=\"page/isettings.ts\" />\n/// <reference path=\"engageform/enum.ts\" />\n/// <reference path=\"engageform/iengageform.ts\" />\n/// <reference path=\"engageform/isettings.ts\" />\n/// <reference path=\"engageform/itheme.ts\" />\n/// <reference path=\"branding/ibranding.ts\" />\n/// <reference path=\"navigation/inavigation.ts\" /> \n\nvar Util;\n(function (Util) {\n    var Event = (function () {\n        function Event() {\n            this._listener = {};\n        }\n        /**\n         * Register callback for given event.\n         *\n         * @param {String} event\n         * @param {Function} callback\n         */\n        Event.prototype.listen = function (event, callback) {\n            console.log('[ Util:Event ] listen', event);\n            if (!this._listener[event]) {\n                this._listener[event] = [];\n            }\n            this._listener[event].push({\n                next: callback\n            });\n        };\n        /**\n         * Fire event with given arguments.\n         *\n         * @param {string} event\n         * @param {args...} data\n         */\n        Event.prototype.trigger = function (event) {\n            var data = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                data[_i - 1] = arguments[_i];\n            }\n            console.log('[ Util:Event ] trigger', event);\n            var args = Array.apply(null, arguments).slice(1);\n            var listeners = this._listener[event];\n            if (!listeners) {\n                return;\n            }\n            for (var i = 0; i < listeners.length; i++) {\n                listeners[i].next.apply(null, args);\n            }\n        };\n        return Event;\n    })();\n    Util.Event = Event;\n})(Util || (Util = {}));\n})(angular);\n//# sourceMappingURL=liveevent.js.map",null,null,"/// <reference path=\"api/api.ts\" />\n/// <reference path=\"liveevent/liveevent.ts\" />\n/// <reference path=\"chat/chat.ts\" />\n\nclass Extension {\n  static $http: ng.IHttpService;\n  static $q: ng.IQService;\n  static $timeout: ng.ITimeoutService;\n  static localStorage: ng.local.storage.ILocalStorageService;\n  static $rootScope: ng.IRootScopeService;\n  static config;\n  static io: SocketIOClientStatic;\n  Liveevent: Liveevent.ILiveevent;\n\n  private static _instances: Liveevent.ILiveeventInstances = {};\n\n  constructor($http: ng.IHttpService, $q: ng.IQService, $timeout: ng.ITimeoutService, localStorage: ng.local.storage.ILocalStorageService, $rootScope: ng.IRootScopeService, ApiConfig) {\n    Extension.$http = $http;\n    Extension.$timeout = $timeout;\n    Extension.$q = $q;\n    Extension.localStorage = localStorage;\n    Extension.config = ApiConfig;\n    Extension.$rootScope = $rootScope;\n  }\n\n  init(opts: API.ILiveEmbed): ng.IPromise<Liveevent.ILiveevent> {\n    if (Extension._instances[opts.id]) {\n      return Extension._instances[opts.id];\n    }\n\n    Extension.io = <SocketIOClientStatic>opts.io;\n\n    var liveEvent = new Liveevent.Liveevent();\n    return Extension._instances[opts.id] = liveEvent.init(opts);\n  }\n}\n\nExtension.$inject = ['$http', '$q', '$timeout', 'localStorageService', '$rootScope', 'ApiConfig'];\napp.service('Liveevent', Extension);\n",null],"sourceRoot":"/source/"}