{"version":3,"sources":["/source/app.ts","/source/engageform/enum.ts","liveevent.js","/source/api/api.ts","/source/liveevent/liveevent.ts","/source/chat/chat.ts","/source/bootstrap.ts","/source/api/iquiz.ts","/source/page/enum.ts","/source/page/isettings.ts","/source/engageform/iengageform.ts","/source/util/event.ts"],"names":["angular","Engageform","app","module","Engageform.Type","Engageform.Mode","Mode","Liveevent","Liveevent.Liveevent","Liveevent.Liveevent.constructor","Liveevent.Liveevent.summaryStatsUnification","_","each","data","answers","answer","Liveevent.Liveevent.getAnswersForSummary","Liveevent.Liveevent.updatePage","this","Extension","Liveevent.Liveevent.removePage","Liveevent.Liveevent.updateQuiz","Liveevent.Liveevent.removeQuiz","Liveevent.Liveevent.initChat","Liveevent.Liveevent.initSocket","_this","Liveevent.Liveevent.getById","Liveevent.Liveevent.getPageById","$http","get","url","then","res","indexOf","status","console","log","Liveevent.Liveevent.init","Liveevent_1","ChatModule","ChatModule.featuredMessageNotify","ChatModule.updateFeaturedStatus","ChatModule.Chat","ChatModule.Chat.constructor","Chat","ChatModule.Chat.registerUpdateMessageHandler","ChatModule.Chat.login","ChatModule.Chat.logout","ChatModule.Chat.updateChat","ChatModule.Chat.sendMsg","msg","ChatModule.Chat.getMsgs","forEach","ChatModule.Chat.handleNewMessageData","forOwn","ChatModule.Chat.initSocket","existingMsg","find","messages","message","ChatModule.Chat.init","Extension.constructor","Extension.init","error","opts","$inject","service","Page","Page.CaseType","Page.Type","Type","Util","Util.Event","Util.Event.constructor","Event","Util.Event.listen","Util.Event.unsubscribe","Util.Event.trigger","_i","arguments"],"mappings":"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","file":"liveevent.min.js","sourcesContent":["/// <reference path=\"../typings/tsd.d.ts\" />\n\nvar app = angular.module('4screens.liveevent', ['LocalStorageModule']);","module Engageform {\n  export enum Type {\n    Undefined,\n    Live,\n    Outcome,\n    Poll,\n    Score,\n    Survey\n  }\n\n  export enum Mode {\n    Undefined,\n    Default,\n    Preview,\n    Result,\n    Summary\n  }\n}\n","(function(angular) {\n/// <reference path=\"../typings/tsd.d.ts\" />\nvar app = angular.module('4screens.liveevent', ['LocalStorageModule']);\nvar Engageform;\n(function (Engageform) {\n    (function (Type) {\n        Type[Type[\"Undefined\"] = 0] = \"Undefined\";\n        Type[Type[\"Live\"] = 1] = \"Live\";\n        Type[Type[\"Outcome\"] = 2] = \"Outcome\";\n        Type[Type[\"Poll\"] = 3] = \"Poll\";\n        Type[Type[\"Score\"] = 4] = \"Score\";\n        Type[Type[\"Survey\"] = 5] = \"Survey\";\n    })(Engageform.Type || (Engageform.Type = {}));\n    var Type = Engageform.Type;\n    (function (Mode) {\n        Mode[Mode[\"Undefined\"] = 0] = \"Undefined\";\n        Mode[Mode[\"Default\"] = 1] = \"Default\";\n        Mode[Mode[\"Preview\"] = 2] = \"Preview\";\n        Mode[Mode[\"Result\"] = 3] = \"Result\";\n        Mode[Mode[\"Summary\"] = 4] = \"Summary\";\n    })(Engageform.Mode || (Engageform.Mode = {}));\n    var Mode = Engageform.Mode;\n})(Engageform || (Engageform = {}));\n/// <reference path=\"iliveevent.ts\" />\n/// <reference path=\"iliveevent.ts\" />\nvar Liveevent;\n(function (Liveevent_1) {\n    var Liveevent = (function () {\n        function Liveevent() {\n            this.event = new Util.Event();\n        }\n        Liveevent.prototype.summaryStatsUnification = function (data) {\n            var result = {};\n            result.questionId = data._id;\n            if (data.type === 'rateIt') {\n                result.avg = data.stats.avg;\n                return result;\n            }\n            _.each(data.answers, function (answer) {\n                result[answer._id] = answer.percent;\n            });\n            return result;\n        };\n        ;\n        Liveevent.prototype.getAnswersForSummary = function () {\n            var _this = this;\n            var url = Extension.config.backend.domain + Extension.config.engageform.presentationViewStats;\n            url = url.replace(':questionId', this.activePageId);\n            return Extension.$http.get(url).then(function (res) {\n                if ([200, 304].indexOf(res.status) !== -1) {\n                    return _this.summaryStatsUnification(res.data);\n                }\n                return Extension.$q.reject(res);\n            });\n        };\n        ;\n        Liveevent.prototype.updatePage = function (page) {\n            var _this = this;\n            console.log('[ Liveevent ] Update Page: ' + page._id, this.currentEngageform.navigation);\n            var __type = this.activePage ? (this.activePage.type + '') : null;\n            // Check if form and if so, send all inputs\n            if (__type && __type.indexOf('form') > -1) {\n                this.currentEngageform.navigation.pick(null, null, { quiet: true });\n            }\n            this.activePage = page;\n            this.activePageId = page._id;\n            this.currentEngageform.message = null;\n            this.currentEngageform.initPage(page);\n            // Add liveSettings\n            this.currentEngageform.liveSettings = page.liveSettings;\n            // Overwrite navigation\n            this.currentEngageform.navigation.enabled = false;\n            this.currentEngageform.navigation.position = 0;\n            this.currentEngageform.navigation.size = 1;\n            this.currentEngageform.navigation.hasStart = false;\n            this.currentEngageform.navigation.enabledStart = false;\n            this.currentEngageform.navigation.hasPrev = false;\n            this.currentEngageform.navigation.enabledPrev = false;\n            this.currentEngageform.navigation.hasNext = false;\n            this.currentEngageform.navigation.enabledNext = false;\n            this.currentEngageform.navigation.hasFinish = false;\n            this.currentEngageform.navigation.enabledFinish = false;\n            this.currentEngageform.navigation.distance = 0;\n            this.currentEngageform.navigation.prev = function ($event) { return; };\n            this.currentEngageform.navigation.next = function ($event, vcase) { return; };\n            this.currentEngageform.navigation.start = function ($event) { return; };\n            this.currentEngageform.navigation.finish = function ($event, vcase) { return; };\n            if (!this.currentEngageform.navigation.truePick) {\n                this.currentEngageform.navigation.truePick = this.currentEngageform.navigation.pick;\n            }\n            // Block pick if answers are not allowed\n            this.currentEngageform.navigation.pick = function (event, page, options) {\n                if (_this.currentEngageform.liveSettings.acceptResponses) {\n                    _this.currentEngageform.navigation.truePick(event, page, options);\n                }\n                else {\n                    _this.currentEngageform.message = 'Answering is disabled at the moment.';\n                }\n            };\n            if (Extension.mode === Engageform.Mode.Summary && this.currentEngageform.current\n                && this.activePageId && _.has(Extension.config, 'engageform.presentationViewStats')) {\n                this.getAnswersForSummary().then(function (answersData) {\n                    _this.currentEngageform.current.updateAnswers(answersData);\n                });\n                this.currentEngageform.liveSettings.showAnswers = true;\n            }\n        };\n        Liveevent.prototype.removePage = function () {\n            var _this = this;\n            console.log('[ Liveevent ] Remove page');\n            Extension.$timeout(function () {\n                _this.activePage = null;\n                _this.activePageId = null;\n                if (_this.currentEngageform) {\n                    _this.currentEngageform.current = null;\n                    _this.currentEngageform.message = null;\n                }\n            });\n        };\n        Liveevent.prototype.updateQuiz = function (EF) {\n            this.currentEngageform = EF;\n            this.event.trigger('now::changed', EF);\n            console.log('[ Liveevent ] Update Quiz: ' + this.currentEngageform._engageformId);\n            if (!this.currentEngageform.navigation.truePick) {\n                this.currentEngageform.navigation.truePick = this.currentEngageform.navigation.pick;\n            }\n            this.activeQuiz = this.currentEngageform;\n            this.activeQuizId = this.currentEngageform._engageformId;\n        };\n        Liveevent.prototype.removeQuiz = function () {\n            var _this = this;\n            console.log('[ Liveevent ] Remove quiz');\n            Extension.$timeout(function () {\n                _this.activeQuiz = null;\n                _this.activeQuizId = null;\n                _this.currentEngageform = null;\n                if (_this.currentEngageform) {\n                    _this.currentEngageform.branding = null;\n                    _this.currentEngageform.current = null;\n                    _this.currentEngageform.message = null;\n                    _this.currentEngageform.meta = null;\n                    _this.currentEngageform.navigation = null;\n                    _this.currentEngageform.theme = null;\n                    _this.currentEngageform.title = null;\n                    _this.currentEngageform.type = null;\n                }\n            });\n        };\n        // Init chat\n        Liveevent.prototype.initChat = function (id) {\n            var deferred = Extension.$q.defer();\n            if (!this.chat && id) {\n                this.chat = new ChatModule.Chat(id, this);\n                return this.chat.init();\n            }\n            else {\n                // If it is already initialised (meaning it's available on this instance), return a fake promise that\n                // is here just to make the API looks better.\n                deferred.resolve();\n                return deferred.promise;\n            }\n        };\n        // Sockets\n        Liveevent.prototype.initSocket = function (opts) {\n            var _this = this;\n            console.log('[ Liveevent ] Init socket');\n            var url = Extension.config.backend.socket + Extension.config.liveEvent.socketNamespace;\n            url = url.replace(':liveEventId', opts.id);\n            this.socket = Extension.io.connect(url, { forceNew: true });\n            this.socket.on('connect', function () {\n                console.log('[ Liveevent:Socket ] Connected');\n                _this.socket.emit('getStatus', { liveEventId: opts.id });\n            });\n            this.socket.on('disconnect', this.initSocket);\n            this.socket.on('error', function (res) {\n                console.warn('[ Liveevent:Socket ] Error: ' + res);\n            });\n            this.socket.on('reconnecting', function () {\n                console.warn('[ Liveevent:Socket ] Reconnecting');\n            });\n            this.socket.on('reconnect_failed', function () {\n                console.warn('[ Liveevent:Socket ] Reconnect failed');\n            });\n            this.socket.on('reconnect', function () {\n                console.log('[ Liveevent:Socket ] Reconnect');\n                _this.socket.emit('getStatus', { liveEventId: opts.id });\n            });\n            this.socket.on('liveEventStatus', function (data) {\n                _this.chat.status = data.chatAvailable;\n                // Liveevent is off\n                if (!data.isActive) {\n                    console.log('[ Liveevent:Socket ] Liveevent is not active');\n                    _this.removePage();\n                    _this.removeQuiz();\n                    // Run callback\n                    if (opts.callback && opts.callback.liveEventStatus) {\n                        data.id = opts.id;\n                        opts.callback.liveEventStatus(data);\n                    }\n                    return;\n                }\n                if (data.activeQuestionId !== _this.activePageId || data.activeQuizId !== _this.activeQuizId) {\n                    // Quiz is off\n                    if (!data.activeQuizId) {\n                        console.log('[ Liveevent ] Quiz is empty');\n                        _this.removeQuiz();\n                        // Run callback\n                        if (opts.callback && opts.callback.liveEventStatus) {\n                            data.id = opts.id;\n                            opts.callback.liveEventStatus(data);\n                        }\n                        return;\n                    }\n                    _this.EF.init({ id: data.activeQuizId, mode: 'default', callback: { sendAnswerCallback: _this.sendAnswerCallback } }).then(function (res) {\n                        _this.updateQuiz(res);\n                    });\n                    // Page is off\n                    if (!data.activeQuestionId) {\n                        console.log('[ Liveevent ] Page is empty');\n                        _this.removePage();\n                        // Run callback\n                        if (opts.callback && opts.callback.liveEventStatus) {\n                            data.id = opts.id;\n                            opts.callback.liveEventStatus(data);\n                        }\n                        return;\n                    }\n                    // Quiz changed\n                    if (data.activeQuizId !== _this.activeQuizId) {\n                        console.log('[ Liveevent:Socket ] Quiz changed');\n                        _this.EF.init({ id: data.activeQuizId, mode: 'default', callback: { sendAnswerCallback: _this.sendAnswerCallback } }).then(function (res) {\n                            _this.updateQuiz(res);\n                            // Update Page\n                            _this.getPageById(data.activeQuestionId).then(function (page) {\n                                _this.updatePage(page);\n                            });\n                        });\n                    }\n                    else {\n                        // Only Page changed\n                        console.log('[ Liveevent:Socket ] Only Page changed');\n                        _this.getPageById(data.activeQuestionId).then(function (page) {\n                            _this.updatePage(page);\n                        });\n                    }\n                }\n                // Quiz and page is same, check if showAnswers or acceptResponses had change\n                if (_this.currentEngageform) {\n                    if (data.showAnswers !== _this.currentEngageform.liveSettings.showAnswers) {\n                        console.log('[ Liveevent ] Show answer option changed');\n                        Extension.$timeout(function () {\n                            _this.currentEngageform.liveSettings.showAnswers = data.showAnswers;\n                        });\n                    }\n                    if (data.acceptResponses !== _this.currentEngageform.liveSettings.acceptResponses) {\n                        console.log('[ Liveevent ] Accept responses option changed');\n                        Extension.$timeout(function () {\n                            _this.currentEngageform.liveSettings.acceptResponses = data.acceptResponses;\n                            _this.currentEngageform.message = '';\n                        });\n                    }\n                }\n                // Run callback\n                if (opts.callback && opts.callback.liveEventStatus) {\n                    data.id = opts.id;\n                    opts.callback.liveEventStatus(data);\n                }\n            });\n            this.socket.on('rateItQuestionStatus', function (data) {\n                _this.currentEngageform.current.updateAnswers(data);\n            });\n            this.socket.on('multipleChoiceQuestionAnswers', function (data) {\n                _this.currentEngageform.current.updateAnswers(data);\n            });\n            // Buzzer listening\n            this.socket.on('buzzerQuestionStatusCallback', function (data) {\n                // Run callback\n                if (opts.callback && opts.callback.buzzerQuestionStatus) {\n                    data.id = opts.id;\n                    opts.callback.buzzerQuestionStatus(data);\n                }\n            });\n        };\n        // Get Liveevent\n        Liveevent.prototype.getById = function (id) {\n            var url = Extension.config.backend.domain + Extension.config.liveEvent.liveEventUrl;\n            url = url.replace(':liveEventId', id);\n            // TODO: Get quiz and current question\n            return Extension.$http.get(url).then(function (res) {\n                if ([200, 304].indexOf(res.status) !== -1) {\n                    return res.data;\n                }\n                return Extension.$q.reject(res);\n            });\n        };\n        // Get Page\n        Liveevent.prototype.getPageById = function (questionId) {\n            var url = Extension.config.backend.domain + Extension.config.liveEvent.activeQuestion;\n            url = url.replace(':questionId', questionId);\n            return Extension.$http.get(url).then(function (res) {\n                if ([200, 304].indexOf(res.status) !== -1) {\n                    console.log('[ Liveevent ] Get PAGE: ' + res.data['_id']);\n                    return res.data;\n                }\n                this.$q.reject(res);\n            });\n        };\n        Liveevent.prototype.init = function (opts) {\n            var _this = this;\n            console.log('[ Liveevent ] Init: ' + opts.id);\n            var deferred = Extension.$q.defer();\n            this.id = opts.id;\n            this.EF = opts.engageform;\n            this.sendAnswerCallback = opts.callback.sendAnswerCallback;\n            // Get Liveevent\n            this.getById(opts.id).then(function (res) {\n                // Init socket\n                _this.initSocket(opts);\n                // Init chat\n                _this.initChat(res.chatId).then(function () {\n                    // ...\n                });\n                deferred.resolve(_this);\n            });\n            return deferred.promise;\n        };\n        return Liveevent;\n    })();\n    Liveevent_1.Liveevent = Liveevent;\n})(Liveevent || (Liveevent = {}));\n/// <reference path=\"./ichat.ts\" />\nvar ChatModule;\n(function (ChatModule) {\n    function featuredMessageNotify(oldValue, newValue, message) {\n        this._liveevent.event.trigger('chat::messageFeatureStatusChanged', this._liveevent.id, message, newValue);\n        return message;\n    }\n    function updateFeaturedStatus(oldValue, newValue, message) {\n        message.featured = newValue;\n        return message;\n    }\n    var Chat = (function () {\n        function Chat(id, liveevent) {\n            this.messages = [];\n            this.updateMessageHandlers = {};\n            this.id = id;\n            this._liveevent = liveevent;\n            // Feature status handlers\n            this.registerUpdateMessageHandler('featured', updateFeaturedStatus);\n            this.registerUpdateMessageHandler('featured', featuredMessageNotify);\n        }\n        /**\n         * Registers handlers that will be invoked and will potentially modify the message on its data update.\n         * @param field\n         * @param handler\n         */\n        Chat.prototype.registerUpdateMessageHandler = function (field, handler) {\n            if (!this.updateMessageHandlers[field]) {\n                this.updateMessageHandlers[field] = [];\n            }\n            this.updateMessageHandlers[field].push(handler);\n        };\n        Chat.prototype.login = function (data, dataMe) {\n            this.user = {\n                accessToken: data.accessToken,\n                user: data.userID,\n                userLink: dataMe.link,\n                userName: dataMe.name,\n                userID: data.userID\n            };\n        };\n        Chat.prototype.logout = function () {\n            this.user = null;\n        };\n        Chat.prototype.updateChat = function (data) {\n            console.log('[ Chat ] Update chat');\n            this.id = data.id;\n            this.name = data.name;\n            this.premoderated = data.premoderated;\n            this.direction = data.chatDirection;\n            this.theme = data.theme;\n            // Get some old msgs\n            this.getMsgs();\n        };\n        Chat.prototype.sendMsg = function (m) {\n            console.log('[ Chat ] Posting msg');\n            if (!this.user)\n                return;\n            var url = Extension.config.backend.domain + Extension.config.chat.sendUrl, msg;\n            url = url.replace(':chatId', this.id);\n            msg = {\n                accessToken: this.user.accessToken,\n                date: Date.now(),\n                hidden: false,\n                id: this.user.userId,\n                msg: m,\n                user: this.user.user,\n                userLink: this.user.userLink,\n                userName: this.user.userName\n            };\n            return Extension.$http.post(url, msg);\n        };\n        Chat.prototype.getMsgs = function () {\n            var _this = this;\n            console.log('[ Chat ] Get old msgs');\n            var url = Extension.config.backend.domain + Extension.config.chat.messagesUrl;\n            url = url.replace(':chatId', this.id);\n            return Extension.$http.get(url).then(function (res) {\n                //console.log('[ Chat ] Got ' + res.data.length + ' msgs');\n                _this.messages = res.data;\n                if (_this.messages.length) {\n                    // Sort by newest\n                    _this.messages = _.sortBy(_this.messages, 'date').reverse();\n                    // Reverse msg order\n                    if (_this.direction && _this.direction === 'ttb') {\n                        _this.messages.reverse();\n                    }\n                }\n                _.forEach(_this.messages, function (message) {\n                    _this._liveevent.event.trigger('chat::message', _this._liveevent.id, message);\n                });\n            });\n        };\n        /**\n         * Handles updates of a message data, delegating data to handler functions.\n         * @param message\n         * @param newData\n         * @returns {IMessage}\n         */\n        Chat.prototype.handleNewMessageData = function (message, newData) {\n            var _this = this;\n            _.forOwn(newData, function (value, field) {\n                // When the value is different than it was before and there are handlers defined, call them.\n                if (value !== message[field] && _.isArray(_this.updateMessageHandlers[field])) {\n                    var oldValue = message[field];\n                    _.forEach(_this.updateMessageHandlers[field], function (handler) {\n                        handler.call(_this, oldValue, value, message);\n                    });\n                }\n            });\n            return message;\n        };\n        Chat.prototype.initSocket = function () {\n            var _this = this;\n            console.log('[ Chat:Socket ] Init socket');\n            var url = Extension.config.backend.socket;\n            this.socket = Extension.io.connect(url, { forceNew: true });\n            this.socket.on('error', function (res) {\n                console.warn(res);\n            });\n            this.socket.on('connect', function (data) {\n                console.log('[ Chat:Socket ] Connected');\n                // Join room\n                _this.socket.emit('joinRoom', _this.id);\n                // We can also leave room, to do so just emit 'leaveRoom' with roomId as param\n            });\n            // New msg event\n            this.socket.on('msg', function (data) {\n                console.log('[ Chat:Socket ] New msg');\n                // \"msg\" event is triggered not only when new message arrives, but also a message changes.\n                var existingMsg = _.find(_this.messages, function (message) {\n                    return message.id === data.id;\n                });\n                Extension.$rootScope.$apply(function () {\n                    if (existingMsg) {\n                        _this.handleNewMessageData(existingMsg, data);\n                    }\n                    else {\n                        if (_this.direction && _this.direction === 'ttb') {\n                            _this.messages.push(data);\n                        }\n                        else {\n                            _this.messages.unshift(data);\n                        }\n                    }\n                });\n                if (!existingMsg) {\n                    _this._liveevent.event.trigger('chat::message', _this._liveevent.id, data);\n                }\n            });\n            this.socket.on('msgHide', function (id) {\n                console.log('[ Chat:Socket] Hide msg');\n                _this._liveevent.event.trigger('chat::hideMessage', id);\n                var messageIndex = _this.messages.length;\n                for (var i = 0; i < _this.messages.length; i += 1) {\n                    if (_this.messages[i].id === id) {\n                        messageIndex = i;\n                    }\n                }\n                Extension.$rootScope.$apply(function () {\n                    _this.messages.splice(messageIndex, 1);\n                });\n            });\n            // On disconect\n            this.socket.on('disconnect', this.initSocket);\n        };\n        Chat.prototype.init = function () {\n            var _this = this;\n            console.log('[ Chat ] Init: ' + this.id);\n            // Get chat details\n            var url = Extension.config.backend.domain + Extension.config.chat.detailUrl;\n            url = url.replace(':chatId', this.id);\n            return Extension.$http.get(url).then(function (res) {\n                _this.updateChat(res.data);\n                _this.initSocket();\n                return res;\n            });\n        };\n        return Chat;\n    })();\n    ChatModule.Chat = Chat;\n})(ChatModule || (ChatModule = {}));\n/// <reference path=\"../typings/tsd.d.ts\" />\n/// <reference path=\"./engageform/enum.ts\" />\n/// <reference path=\"./api/api.ts\" />\n/// <reference path=\"./liveevent/liveevent.ts\" />\n/// <reference path=\"./chat/chat.ts\" />\nvar Extension = (function () {\n    function Extension($http, $q, $timeout, localStorage, $rootScope, ApiConfig) {\n        Extension.$http = $http;\n        Extension.$timeout = $timeout;\n        Extension.$q = $q;\n        Extension.localStorage = localStorage;\n        Extension.config = ApiConfig;\n        Extension.$rootScope = $rootScope;\n    }\n    Extension.prototype.init = function (opts) {\n        if (Extension._instances[opts.id]) {\n            return Extension._instances[opts.id];\n        }\n        Extension.io = opts.io;\n        switch (opts.mode) {\n            case 'summary':\n                Extension.mode = Engageform.Mode.Summary;\n                break;\n            case 'default':\n            case '':\n            case undefined:\n                Extension.mode = Engageform.Mode.Default;\n                break;\n            default:\n                return Extension.$q.reject({\n                    status: 'error',\n                    error: {\n                        code: 406,\n                        message: 'Mode property not supported.'\n                    },\n                    data: opts\n                });\n        }\n        var liveEvent = new Liveevent.Liveevent();\n        if (!opts.callback) {\n            opts.callback = {\n                sendAnswerCallback: function () { }\n            };\n        }\n        else if (!opts.callback.sendAnswerCallback) {\n            opts.callback.sendAnswerCallback = function () { };\n        }\n        return Extension._instances[opts.id] = liveEvent.init(opts);\n    };\n    Extension.mode = Engageform.Mode.Undefined;\n    Extension._instances = {};\n    return Extension;\n})();\nExtension.$inject = ['$http', '$q', '$timeout', 'localStorageService', '$rootScope', 'ApiConfig'];\napp.service('Liveevent', Extension);\n/// <reference path=\"../branding/ibranding.ts\" />\nvar Page;\n(function (Page) {\n    (function (CaseType) {\n        CaseType[CaseType[\"Undefined\"] = 0] = \"Undefined\";\n        CaseType[CaseType[\"Image\"] = 1] = \"Image\";\n        CaseType[CaseType[\"Input\"] = 2] = \"Input\";\n        CaseType[CaseType[\"Iteration\"] = 3] = \"Iteration\";\n        CaseType[CaseType[\"Text\"] = 4] = \"Text\";\n    })(Page.CaseType || (Page.CaseType = {}));\n    var CaseType = Page.CaseType;\n    (function (Type) {\n        Type[Type[\"Undefined\"] = 0] = \"Undefined\";\n        Type[Type[\"EndPage\"] = 1] = \"EndPage\";\n        Type[Type[\"Form\"] = 2] = \"Form\";\n        Type[Type[\"MultiChoice\"] = 3] = \"MultiChoice\";\n        Type[Type[\"PictureChoice\"] = 4] = \"PictureChoice\";\n        Type[Type[\"Rateit\"] = 5] = \"Rateit\";\n        Type[Type[\"StartPage\"] = 6] = \"StartPage\";\n        Type[Type[\"Buzzer\"] = 7] = \"Buzzer\";\n        Type[Type[\"Poster\"] = 8] = \"Poster\";\n    })(Page.Type || (Page.Type = {}));\n    var Type = Page.Type;\n})(Page || (Page = {}));\nvar Page;\n(function (Page) {\n    ;\n})(Page || (Page = {}));\n///<reference path=\"../page/ipage.ts\"/>\n/// <reference path=\"api/iembed.ts\" />\n/// <reference path=\"api/iquizquestion.ts\" />\n/// <reference path=\"api/iquizquestionsres.ts\" />\n/// <reference path=\"api/iquizquestionanswer.ts\" />\n/// <reference path=\"api/iquizquestionanswerres.ts\" />\n/// <reference path=\"api/iquiz.ts\" />\n/// <reference path=\"api/iquizres.ts\" />\n/// <reference path=\"api/iquizfinish.ts\" />\n/// <reference path=\"api/iquizfinishres.ts\" />\n/// <reference path=\"page/enum.ts\" />\n/// <reference path=\"page/icase.ts\" />\n/// <reference path=\"page/ipage.ts\" />\n/// <reference path=\"page/ipages.ts\" />\n/// <reference path=\"page/ipagesent.ts\" />\n/// <reference path=\"page/isettings.ts\" />\n/// <reference path=\"engageform/enum.ts\" />\n/// <reference path=\"engageform/iengageform.ts\" />\n/// <reference path=\"engageform/isettings.ts\" />\n/// <reference path=\"engageform/itheme.ts\" />\n/// <reference path=\"engageform/itabs.ts\" />\n/// <reference path=\"branding/ibranding.ts\" />\n/// <reference path=\"navigation/inavigation.ts\" /> \n/*!\n * 4screens-angular-liveevent v0.1.44\n * (c) 2015 Nopattern sp. z o.o.\n * License: proprietary\n */\nvar Util;\n(function (Util) {\n    var Event = (function () {\n        function Event() {\n            this._listener = {};\n        }\n        /**\n         * Register callback for given event.\n         *\n         * @param {String} event\n         * @param {Function} callback\n         */\n        Event.prototype.listen = function (event, callback) {\n            console.log('[ Util:Event ] listen', event);\n            if (!this._listener[event]) {\n                this._listener[event] = [];\n            }\n            this._listener[event].push(callback);\n        };\n        /**\n         * Removes one or all calbacks from the registered listeners.\n         *\n         * @param {String} event\n         * @param {Function} callback\n           */\n        Event.prototype.unsubscribe = function (event, callback) {\n            console.log('[ Util:Event ] unsubscribe', event);\n            if (this._listener[event]) {\n                if (!callback) {\n                    this._listener[event].length = 0;\n                }\n                else {\n                    _.pull(this._listener[event], callback);\n                }\n            }\n        };\n        /**\n         * Fire event with given arguments.\n         *\n         * @param {string} event\n         * @param {args...} data\n         */\n        Event.prototype.trigger = function (event) {\n            var data = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                data[_i - 1] = arguments[_i];\n            }\n            console.log('[ Util:Event ] trigger', event);\n            var args = Array.apply(null, arguments).slice(1);\n            var listeners = this._listener[event];\n            if (!listeners) {\n                return;\n            }\n            for (var i = 0; i < listeners.length; i++) {\n                listeners[i].apply(null, args);\n            }\n        };\n        return Event;\n    })();\n    Util.Event = Event;\n})(Util || (Util = {}));\n})(angular);\n\n","/// <reference path=\"iliveevent.ts\" />\n","/// <reference path=\"iliveevent.ts\" />\n\nmodule Liveevent {\n  interface summaryStatData {\n    questionId: string;\n    avg: number;\n  }\n\n  export class Liveevent implements ILiveevent {\n    enabled: boolean;\n    id :string;\n    title: string;\n\n    activePage: Page.IPage;\n    activeQuiz: Engageform.IEngageform;\n    activePageId: string;\n    activeQuizId: string;\n    socket: SocketIOClient.Socket;\n    EF: Engageform.IEngageform;\n    chat: ChatModule.IChat;\n    currentEngageform: Engageform.IEngageform;\n    sendAnswerCallback: API.answerCallback;\n\n    event: Util.Event;\n\n    constructor() {\n      this.event = new Util.Event();\n    }\n\n    private summaryStatsUnification(data): summaryStatData {\n      var result = <summaryStatData>{};\n\n      result.questionId = data._id;\n\n      if (data.type === 'rateIt') {\n        result.avg = data.stats.avg;\n\n        return result;\n      }\n\n      _.each(data.answers, function(answer: {percent: number, _id: string}) {\n        result[answer._id] = answer.percent;\n      });\n\n      return result;\n    };\n\n    private getAnswersForSummary(): ng.IPromise<any> {\n      var url = Extension.config.backend.domain + Extension.config.engageform.presentationViewStats;\n      url = url.replace(':questionId', this.activePageId);\n\n      return Extension.$http.get(url).then((res) => {\n        if ([200, 304].indexOf(res.status) !== -1) {\n          return this.summaryStatsUnification(res.data);\n        }\n\n        return Extension.$q.reject(res);\n      });\n    };\n\n    private updatePage(page: Page.IPage) {\n      console.log('[ Liveevent ] Update Page: ' + page._id, this.currentEngageform.navigation);\n\n      var __type = this.activePage ? (this.activePage.type + '') : null;\n\n      // Check if form and if so, send all inputs\n      if (__type && __type.indexOf('form') > -1) {\n        this.currentEngageform.navigation.pick(null, null, {quiet: true});\n      }\n\n      this.activePage = page;\n      this.activePageId = page._id;\n\n      this.currentEngageform.message = null;\n      this.currentEngageform.initPage(page);\n\n      // Add liveSettings\n      this.currentEngageform.liveSettings = <Page.ILiveSetting>page.liveSettings;\n\n      // Overwrite navigation\n      this.currentEngageform.navigation.enabled = false;\n      this.currentEngageform.navigation.position = 0;\n      this.currentEngageform.navigation.size = 1;\n      this.currentEngageform.navigation.hasStart = false;\n      this.currentEngageform.navigation.enabledStart = false;\n      this.currentEngageform.navigation.hasPrev = false;\n      this.currentEngageform.navigation.enabledPrev = false;\n      this.currentEngageform.navigation.hasNext = false;\n      this.currentEngageform.navigation.enabledNext = false;\n      this.currentEngageform.navigation.hasFinish = false;\n      this.currentEngageform.navigation.enabledFinish = false;\n      this.currentEngageform.navigation.distance = 0;\n      this.currentEngageform.navigation.prev = ($event) => { return; };\n      this.currentEngageform.navigation.next = ($event, vcase: Page.ICase) => { return; };\n      this.currentEngageform.navigation.start = ($event) => { return; };\n      this.currentEngageform.navigation.finish = ($event, vcase: Page.ICase) => { return; };\n\n      if (!this.currentEngageform.navigation.truePick) {\n        this.currentEngageform.navigation.truePick = this.currentEngageform.navigation.pick;\n      }\n\n      // Block pick if answers are not allowed\n      this.currentEngageform.navigation.pick = (event, page: Page.ICase, options?) => {\n        if (this.currentEngageform.liveSettings.acceptResponses) {\n          this.currentEngageform.navigation.truePick(event, page, options);\n        } else {\n          this.currentEngageform.message = 'Answering is disabled at the moment.';\n        }\n      };\n\n      if (Extension.mode === Engageform.Mode.Summary && this.currentEngageform.current\n        && this.activePageId && _.has(Extension.config, 'engageform.presentationViewStats')) {\n        this.getAnswersForSummary().then((answersData) => {\n          this.currentEngageform.current.updateAnswers(answersData);\n        });\n\n        this.currentEngageform.liveSettings.showAnswers = true;\n      }\n    }\n\n    private removePage() {\n      console.log('[ Liveevent ] Remove page');\n      Extension.$timeout(() => {\n        this.activePage = null;\n        this.activePageId = null;\n\n        if (this.currentEngageform) {\n          this.currentEngageform.current = null;\n          this.currentEngageform.message = null;\n        }\n      });\n    }\n\n    private updateQuiz(EF) {\n      this.currentEngageform = EF;\n\n      this.event.trigger('now::changed', EF);\n\n      console.log('[ Liveevent ] Update Quiz: ' + this.currentEngageform._engageformId);\n\n      if (!this.currentEngageform.navigation.truePick) {\n        this.currentEngageform.navigation.truePick = this.currentEngageform.navigation.pick;\n      }\n\n      this.activeQuiz = this.currentEngageform;\n      this.activeQuizId = this.currentEngageform._engageformId;\n    }\n\n    private removeQuiz() {\n      console.log('[ Liveevent ] Remove quiz');\n      Extension.$timeout(() => {\n        this.activeQuiz = null;\n        this.activeQuizId = null;\n        this.currentEngageform = null;\n\n        if (this.currentEngageform) {\n          this.currentEngageform.branding = null;\n          this.currentEngageform.current = null;\n          this.currentEngageform.message = null;\n          this.currentEngageform.meta = null;\n          this.currentEngageform.navigation = null;\n          this.currentEngageform.theme = null;\n          this.currentEngageform.title = null;\n          this.currentEngageform.type = null;\n        }\n      });\n    }\n\n    // Init chat\n    private initChat(id: string): ng.IPromise<any> {\n      var deferred = Extension.$q.defer();\n\n      if (!this.chat && id) {\n        this.chat = new ChatModule.Chat(id, this);\n\n        return this.chat.init();\n      } else {\n        // If it is already initialised (meaning it's available on this instance), return a fake promise that\n        // is here just to make the API looks better.\n        deferred.resolve();\n        return deferred.promise;\n      }\n    }\n\n    // Sockets\n    private initSocket(opts: API.ILiveEmbed) {\n      console.log('[ Liveevent ] Init socket');\n      var url = Extension.config.backend.socket + Extension.config.liveEvent.socketNamespace;\n      url = url.replace(':liveEventId', opts.id);\n      this.socket = Extension.io.connect(url, { forceNew: true });\n\n      this.socket.on('connect', () => {\n        console.log('[ Liveevent:Socket ] Connected');\n        this.socket.emit('getStatus', { liveEventId: opts.id });\n      });\n\n      this.socket.on('disconnect', this.initSocket);\n\n      this.socket.on('error', (res) => {\n        console.warn('[ Liveevent:Socket ] Error: ' + res);\n      });\n\n      this.socket.on('reconnecting', () => {\n        console.warn('[ Liveevent:Socket ] Reconnecting');\n      });\n\n      this.socket.on('reconnect_failed', () => {\n        console.warn('[ Liveevent:Socket ] Reconnect failed');\n      });\n\n      this.socket.on('reconnect', () => {\n        console.log('[ Liveevent:Socket ] Reconnect');\n        this.socket.emit('getStatus', { liveEventId: opts.id });\n      });\n\n      this.socket.on('liveEventStatus', (data) => {\n\n        this.chat.status = data.chatAvailable;\n\n        // Liveevent is off\n        if (!data.isActive) {\n          console.log('[ Liveevent:Socket ] Liveevent is not active');\n          this.removePage();\n          this.removeQuiz();\n\n          // Run callback\n          if (opts.callback && opts.callback.liveEventStatus) {\n            data.id = opts.id;\n            opts.callback.liveEventStatus(data);\n          }\n\n          return;\n        }\n\n        if (data.activeQuestionId !== this.activePageId || data.activeQuizId !== this.activeQuizId) {\n\n          // Quiz is off\n          if (!data.activeQuizId) {\n            console.log('[ Liveevent ] Quiz is empty');\n            this.removeQuiz();\n\n            // Run callback\n            if (opts.callback && opts.callback.liveEventStatus) {\n              data.id = opts.id;\n              opts.callback.liveEventStatus(data);\n            }\n\n            return;\n          }\n\n          this.EF.init({ id: data.activeQuizId, mode: 'default', callback: { sendAnswerCallback: this.sendAnswerCallback }}).then((res) => {\n            this.updateQuiz(res);\n          });\n\n          // Page is off\n          if (!data.activeQuestionId) {\n              console.log('[ Liveevent ] Page is empty');\n            this.removePage();\n\n            // Run callback\n            if (opts.callback && opts.callback.liveEventStatus) {\n              data.id = opts.id;\n              opts.callback.liveEventStatus(data);\n            }\n\n            return;\n          }\n\n          // Quiz changed\n          if (data.activeQuizId !== this.activeQuizId) {\n            console.log('[ Liveevent:Socket ] Quiz changed');\n            this.EF.init({ id: data.activeQuizId, mode: 'default', callback: { sendAnswerCallback: this.sendAnswerCallback } }).then((res) => {\n                this.updateQuiz(res);\n\n              // Update Page\n              this.getPageById(data.activeQuestionId).then((page: Page.IPage) => {\n                this.updatePage(page);\n              });\n            });\n          } else {\n            // Only Page changed\n            console.log('[ Liveevent:Socket ] Only Page changed');\n            this.getPageById(data.activeQuestionId).then((page: Page.IPage) => {\n              this.updatePage(page);\n            });\n          }\n        }\n\n        // Quiz and page is same, check if showAnswers or acceptResponses had change\n        if (this.currentEngageform) {\n          if (data.showAnswers !== this.currentEngageform.liveSettings.showAnswers) {\n            console.log('[ Liveevent ] Show answer option changed');\n\n            Extension.$timeout(() => {\n              this.currentEngageform.liveSettings.showAnswers = data.showAnswers;\n            });\n          }\n          if (data.acceptResponses !== this.currentEngageform.liveSettings.acceptResponses) {\n            console.log('[ Liveevent ] Accept responses option changed');\n\n            Extension.$timeout(() => {\n              this.currentEngageform.liveSettings.acceptResponses = data.acceptResponses;\n              this.currentEngageform.message = '';\n            });\n          }\n        }\n\n        // Run callback\n        if (opts.callback && opts.callback.liveEventStatus) {\n          data.id = opts.id;\n          opts.callback.liveEventStatus(data);\n        }\n      });\n\n      this.socket.on('rateItQuestionStatus', (data) => {\n        this.currentEngageform.current.updateAnswers(data);\n      });\n\n      this.socket.on('multipleChoiceQuestionAnswers', (data) => {\n        this.currentEngageform.current.updateAnswers(data);\n      });\n\n      // Buzzer listening\n      this.socket.on('buzzerQuestionStatusCallback', (data) => {\n\n        // Run callback\n        if (opts.callback && opts.callback.buzzerQuestionStatus) {\n          data.id = opts.id;\n          opts.callback.buzzerQuestionStatus(data);\n        }\n      });\n    }\n\n    // Get Liveevent\n    getById(id: string): ng.IPromise<ILiveeventResponse> {\n      var url = Extension.config.backend.domain + Extension.config.liveEvent.liveEventUrl;\n      url = url.replace(':liveEventId', id);\n\n      // TODO: Get quiz and current question\n      return Extension.$http.get(url).then((res) => {\n        if ([200, 304].indexOf(res.status) !== -1) {\n          return res.data;\n        }\n\n        return Extension.$q.reject(res);\n      });\n    }\n\n    // Get Page\n    private getPageById(questionId: string) {\n      var url = Extension.config.backend.domain + Extension.config.liveEvent.activeQuestion;\n      url = url.replace(':questionId', questionId);\n\n      return Extension.$http.get(url).then(function(res) {\n\n        if ([200, 304].indexOf(res.status) !== -1) {\n          console.log('[ Liveevent ] Get PAGE: ' + res.data['_id']);\n          return res.data;\n        }\n\n          this.$q.reject(res);\n      });\n    }\n\n    init(opts: API.ILiveEmbed) {\n      console.log('[ Liveevent ] Init: ' + opts.id);\n      var deferred = Extension.$q.defer();\n\n      this.id = opts.id;\n      this.EF = opts.engageform;\n      this.sendAnswerCallback = opts.callback.sendAnswerCallback;\n\n      // Get Liveevent\n      this.getById(opts.id).then((res) => {\n        // Init socket\n        this.initSocket(opts);\n\n        // Init chat\n        this.initChat(res.chatId).then(() => {\n          // ...\n        });\n        deferred.resolve(this);\n      });\n\n      return deferred.promise;\n    }\n  }\n}\n","/// <reference path=\"./ichat.ts\" />\n\nmodule ChatModule {\n  function featuredMessageNotify(oldValue, newValue, message) {\n    this._liveevent.event.trigger('chat::messageFeatureStatusChanged', this._liveevent.id, message, newValue);\n    return message;\n  }\n\n  function updateFeaturedStatus(oldValue, newValue, message) {\n    message.featured = newValue;\n    return message;\n  }\n\n  export class Chat implements IChat {\n    id: string;\n    name: string;\n    premoderated: boolean;\n    direction: string;\n    theme: ITheme;\n\n    socket: SocketIOClient.Socket;\n    messages: IMessage[] = [];\n    user: IUser;\n    status: boolean;\n\n    private _liveevent: Liveevent.ILiveevent;\n\n    private updateMessageHandlers = {};\n\n    /**\n     * Registers handlers that will be invoked and will potentially modify the message on its data update.\n     * @param field\n     * @param handler\n     */\n    private registerUpdateMessageHandler(field: string, handler: (oldValue: any, newValue: any, message: IMessage) => IMessage) {\n      if (!this.updateMessageHandlers[field]) {\n        this.updateMessageHandlers[field] = [];\n      }\n\n      this.updateMessageHandlers[field].push(handler);\n    }\n\n    constructor(id: string, liveevent: Liveevent.ILiveevent) {\n      this.id = id;\n      this._liveevent = liveevent;\n\n      // Feature status handlers\n      this.registerUpdateMessageHandler('featured', updateFeaturedStatus);\n      this.registerUpdateMessageHandler('featured', featuredMessageNotify);\n    }\n\n    private login(data: IFbAuth, dataMe: any) { // FIXME: dateMe FB interface (v2.3 or 2.2) ?\n      this.user = {\n        accessToken: data.accessToken,\n        user: data.userID,\n        userLink: dataMe.link,\n        userName: dataMe.name,\n        userID: data.userID\n      };\n    }\n\n    private logout():void {\n      this.user = null;\n    }\n\n    private updateChat(data) {\n      console.log('[ Chat ] Update chat');\n      this.id = data.id;\n      this.name = data.name;\n      this.premoderated = data.premoderated;\n      this.direction = data.chatDirection;\n      this.theme = data.theme;\n\n      // Get some old msgs\n      this.getMsgs();\n    }\n\n    private sendMsg(m: IMessage) {\n      console.log('[ Chat ] Posting msg');\n\n      if (!this.user) return;\n\n      var url = Extension.config.backend.domain + Extension.config.chat.sendUrl, msg;\n      url = url.replace(':chatId', this.id);\n\n      msg = {\n        accessToken: this.user.accessToken,\n        date: Date.now(),\n        hidden: false,\n        id: this.user.userId,\n        msg: m,\n        user: this.user.user,\n        userLink: this.user.userLink,\n        userName: this.user.userName\n      };\n\n      return Extension.$http.post(url, msg);\n    }\n\n    private getMsgs() {\n      console.log('[ Chat ] Get old msgs');\n      var url = Extension.config.backend.domain + Extension.config.chat.messagesUrl;\n      url = url.replace(':chatId', this.id);\n      return Extension.$http.get(url).then((res) => {\n        //console.log('[ Chat ] Got ' + res.data.length + ' msgs');\n        this.messages = <IMessage[]>res.data;\n\n        if (this.messages.length) {\n          // Sort by newest\n          this.messages = _.sortBy(this.messages, 'date').reverse();\n\n          // Reverse msg order\n          if (this.direction && this.direction === 'ttb') {\n            this.messages.reverse();\n          }\n        }\n\n        _.forEach(this.messages, (message) => {\n          this._liveevent.event.trigger('chat::message', this._liveevent.id, message);\n        })\n      });\n    }\n\n    /**\n     * Handles updates of a message data, delegating data to handler functions.\n     * @param message\n     * @param newData\n     * @returns {IMessage}\n     */\n    private handleNewMessageData(message: IMessage, newData: IMessage) {\n      _.forOwn(newData, (value, field) => {\n        // When the value is different than it was before and there are handlers defined, call them.\n        if (value !== message[field] && _.isArray(this.updateMessageHandlers[field])) {\n          var oldValue = message[field];\n          _.forEach(this.updateMessageHandlers[field], (handler) => {\n            handler.call(this, oldValue, value, message);\n          })\n        }\n      });\n\n      return message;\n    }\n\n    private initSocket() {\n      console.log('[ Chat:Socket ] Init socket');\n\n      var url = Extension.config.backend.socket;\n\n      this.socket = Extension.io.connect(url, { forceNew: true });\n\n      this.socket.on('error', (res) => {\n        console.warn(res);\n      });\n\n      this.socket.on('connect', (data) => {\n        console.log('[ Chat:Socket ] Connected');\n\n        // Join room\n        this.socket.emit('joinRoom', this.id);\n        // We can also leave room, to do so just emit 'leaveRoom' with roomId as param\n      });\n\n      // New msg event\n      this.socket.on('msg', (data) => {\n        console.log('[ Chat:Socket ] New msg');\n\n        // \"msg\" event is triggered not only when new message arrives, but also a message changes.\n        var existingMsg = _.find(this.messages, function(message) {\n          return message.id === data.id;\n        });\n\n        Extension.$rootScope.$apply(() => {\n          if (existingMsg) {\n            this.handleNewMessageData(existingMsg, data);\n          } else {\n            if (this.direction && this.direction === 'ttb') {\n              this.messages.push(<IMessage>data);\n            } else {\n              this.messages.unshift(<IMessage>data);\n            }\n          }\n        });\n\n        if (!existingMsg) {\n          this._liveevent.event.trigger('chat::message', this._liveevent.id, <IMessage>data);\n        }\n      });\n\n      this.socket.on('msgHide', (id) => {\n        console.log('[ Chat:Socket] Hide msg');\n\n        this._liveevent.event.trigger('chat::hideMessage', id);\n\n        var messageIndex = this.messages.length;\n\n        for (var i = 0; i < this.messages.length; i += 1) {\n          if (this.messages[i].id === id) {\n            messageIndex = i;\n          }\n        }\n\n        Extension.$rootScope.$apply(() => {\n          this.messages.splice(messageIndex, 1);\n        });\n      });\n\n      // On disconect\n      this.socket.on('disconnect', this.initSocket);\n    }\n\n    init():ng.IPromise<IChatResponse> {\n      console.log('[ Chat ] Init: ' + this.id);\n\n      // Get chat details\n      var url = Extension.config.backend.domain + Extension.config.chat.detailUrl;\n      url = url.replace(':chatId', this.id);\n      return Extension.$http.get(url).then((res: IChatResponse) => {\n        this.updateChat(res.data);\n        this.initSocket();\n        return res;\n      });\n    }\n  }\n}\n","/// <reference path=\"../typings/tsd.d.ts\" />\n/// <reference path=\"./engageform/enum.ts\" />\n/// <reference path=\"./api/api.ts\" />\n/// <reference path=\"./liveevent/liveevent.ts\" />\n/// <reference path=\"./chat/chat.ts\" />\n\nclass Extension {\n  static $http: ng.IHttpService;\n  static $q: ng.IQService;\n  static $timeout: ng.ITimeoutService;\n  static localStorage: ng.local.storage.ILocalStorageService;\n  static $rootScope: ng.IRootScopeService;\n  static config;\n  static io: SocketIOClientStatic;\n  static mode: Engageform.Mode = Engageform.Mode.Undefined;\n  Liveevent: Liveevent.ILiveevent;\n\n  private static _instances: Liveevent.ILiveeventInstances = {};\n\n  constructor($http: ng.IHttpService, $q: ng.IQService, $timeout: ng.ITimeoutService, localStorage: ng.local.storage.ILocalStorageService, $rootScope: ng.IRootScopeService, ApiConfig) {\n    Extension.$http = $http;\n    Extension.$timeout = $timeout;\n    Extension.$q = $q;\n    Extension.localStorage = localStorage;\n    Extension.config = ApiConfig;\n    Extension.$rootScope = $rootScope;\n  }\n\n  init(opts: API.ILiveEmbed): ng.IPromise<Liveevent.ILiveevent> {\n    if (Extension._instances[opts.id]) {\n      return Extension._instances[opts.id];\n    }\n\n    Extension.io = <SocketIOClientStatic>opts.io;\n\n    switch (opts.mode) {\n      case 'summary':\n        Extension.mode = Engageform.Mode.Summary;\n        break;\n      case 'default':\n      case '':\n      case undefined:\n        Extension.mode = Engageform.Mode.Default;\n        break;\n      default:\n        return Extension.$q.reject({\n          status: 'error',\n          error: {\n            code: 406,\n            message: 'Mode property not supported.'\n          },\n          data: opts\n        });\n    }\n\n    var liveEvent = new Liveevent.Liveevent();\n\n    if (!opts.callback) {\n      opts.callback = {\n        sendAnswerCallback: function(){}\n      }\n    } else if (!opts.callback.sendAnswerCallback) {\n      opts.callback.sendAnswerCallback = function(){};\n    }\n\n    return Extension._instances[opts.id] = liveEvent.init(opts);\n  }\n}\n\nExtension.$inject = ['$http', '$q', '$timeout', 'localStorageService', '$rootScope', 'ApiConfig'];\napp.service('Liveevent', Extension);\n","/// <reference path=\"../branding/ibranding.ts\" />\n\nmodule API {\n  export interface IQuiz {\n    _id: string;\n    title: string;\n    type: string;\n\n    tabs: {\n      chatTitle: string;\n      liveTitle: string;\n      logoUrl: string;\n    };\n\n    settings: {\n      allowAnswerChange: boolean;\n      branding?: Branding.IBrandingData,\n      share?: {\n        title: string;\n        imageUrl: string;\n        link: string;\n        description: string;\n      }\n    };\n    theme: {\n      answerBackgroundColor: string;\n      answerBorderColor: string;\n      answerColor: string;\n      backgroundBrightness: string;\n      backgroundColor: string;\n      backgroundImageBlur: string;\n      backgroundImageFile: string;\n      backgroundImagePosition: string;\n      buttonColor: string;\n      font: string;\n      questionColor: string;\n      customThemeCssFile: string;\n      tabFontColor: string;\n      tabColor: string;\n      tabBorderColor: string;\n    };\n  }\n}\n","module Page {\n  export enum CaseType {\n    Undefined,\n    Image,\n    Input,\n    Iteration,\n    Text\n  }\n\n  export enum Type {\n    Undefined,\n    EndPage,\n    Form,\n    MultiChoice,\n    PictureChoice,\n    Rateit,\n    StartPage,\n    Buzzer,\n    Poster\n  }\n}\n","module Page {\n  export interface ISetting {\n    showAnswers: boolean;\n    showCorrectAnswer: boolean;\n    showMainMedia: boolean;\n    showDescription: boolean;\n    requiredAnswer: boolean;\n  }\n\n  export interface ILiveSetting {\n      acceptResponses: boolean;\n      showAnswers: boolean;\n  };\n}\n","///<reference path=\"../page/ipage.ts\"/>\n\nmodule Engageform {\n  export interface IEngageform {\n    _engageformId?: string;\n    enabled: boolean;\n    type: Type;\n    title: string;\n    settings: ISetting;\n    theme: ITheme;\n    branding: Branding.IBranding;\n    tabs: ITabs;\n\n    Mode: Engageform.Mode;\n\n    current: Page.IPage;\n    message: string;\n    navigation: Navigation.INavigation;\n\n    meta?: any;\n\n    pages: Page.IPages;\n    startPages: string[];\n    endPages: string[];\n    availablePages: string[];\n    hasForms: boolean;\n\n    liveSettings: Page.ILiveSetting;\n\n    isType(type: Type): boolean;\n    init(opts: API.IEmbed): ng.IPromise<Engageform.IEngageform>;\n\n    initPage(page: Page.IPage): void;\n\n    initPages(): ng.IPromise<IEngageform>;\n    setCurrent(pageId: string);\n    setCurrentEndPage(): ng.IPromise<API.IQuizFinish>;\n  }\n}\n","module Util {\n  export interface IEvent {\n    listen(event: string, callback: any): void;\n    trigger(event: string, ...data: any[]): void;\n    unsubscribe(event: string, callback: any): void;\n  }\n\n  export interface IListenersDictionary {\n    [index: string]: IListener[];\n  }\n\n  export interface IListener {\n    (): void;\n  }\n\n  export class Event implements IEvent {\n    private _listener: IListenersDictionary = {};\n\n    /**\n     * Register callback for given event.\n     *\n     * @param {String} event\n     * @param {Function} callback\n     */\n    listen(event: string, callback: any): void {\n      console.log('[ Util:Event ] listen', event);\n\n      if (!this._listener[event]) {\n        this._listener[event] = [];\n      }\n\n      this._listener[event].push(callback);\n    }\n\n    /**\n     * Removes one or all calbacks from the registered listeners.\n     *\n     * @param {String} event\n     * @param {Function} callback\n       */\n    unsubscribe(event: string, callback?: any): void {\n      console.log('[ Util:Event ] unsubscribe', event);\n\n      if (this._listener[event]) {\n        if (!callback) {\n          this._listener[event].length = 0;\n        } else {\n          _.pull(this._listener[event], callback);\n        }\n      }\n    }\n\n    /**\n     * Fire event with given arguments.\n     *\n     * @param {string} event\n     * @param {args...} data\n     */\n    trigger(event: string, ...data: any[]): void {\n      console.log('[ Util:Event ] trigger', event);\n\n      var args = Array.apply(null, arguments).slice(1);\n      var listeners = this._listener[event];\n\n      if (!listeners) {\n        return;\n      }\n\n      for (var i=0; i<listeners.length; i++) {\n        listeners[i].apply(null, args);\n      }\n    }\n  }\n}\n"],"sourceRoot":"/source/"}