{"version":3,"sources":["/source/header.ts","liveevent.js","/source/liveevent/liveevent.ts","/source/chat/chat.ts","/source/bootstrap.ts","/source/util/event.ts"],"names":["angular","Liveevent","app","module","Liveevent.Liveevent","Liveevent.Liveevent.constructor","Liveevent.Liveevent.summaryStatsUnification","_","each","data","answers","answer","Liveevent.Liveevent.getAnswersForSummary","Liveevent.Liveevent.updatePage","this","Liveevent.Liveevent.removePage","Extension","Liveevent.Liveevent.updateQuiz","Liveevent.Liveevent.removeQuiz","Liveevent.Liveevent.initChat","Liveevent.Liveevent.initSocket","_this","Liveevent.Liveevent.getById","Liveevent.Liveevent.getPageById","$http","get","url","then","res","indexOf","status","console","log","Liveevent.Liveevent.init","Liveevent_1","ChatModule","ChatModule.featuredMessageNotify","ChatModule.updateFeaturedStatus","ChatModule.Chat","ChatModule.Chat.constructor","Chat","ChatModule.Chat.registerUpdateMessageHandler","ChatModule.Chat.login","ChatModule.Chat.logout","ChatModule.Chat.updateChat","ChatModule.Chat.sendMsg","msg","ChatModule.Chat.getMsgs","forEach","ChatModule.Chat.handleNewMessageData","forOwn","ChatModule.Chat.initSocket","ChatModule.Chat.init","Extension.constructor","Extension.init","error","opts","$inject","service","Util","Util.Event","Util.Event.constructor","Event","Util.Event.listen","Util.Event.unsubscribe","Util.Event.trigger","_i","arguments"],"mappings":"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","file":"liveevent.min.js","sourcesContent":["/*!\n * 4screens-angular-liveevent v0.1.42\n * (c) 2015 Nopattern sp. z o.o.\n * License: proprietary\n */\n","(function(angular) {\n/*!\n * 4screens-angular-liveevent v0.1.42\n * (c) 2015 Nopattern sp. z o.o.\n * License: proprietary\n */\n\n/// <reference path=\"../typings/tsd.d.ts\" />\nvar app = angular.module('4screens.liveevent', ['LocalStorageModule']);\n\n/// <reference path=\"iliveevent.ts\" />\nvar Liveevent;\n(function (Liveevent_1) {\n    var Liveevent = (function () {\n        function Liveevent() {\n            console.log('[ Liveevent ] Constructor');\n            this.event = new Util.Event();\n        }\n        Liveevent.prototype.summaryStatsUnification = function (data) {\n            var result = {};\n            result.questionId = data._id;\n            if (data.type === 'rateIt') {\n                result.avg = data.stats.avg;\n                return result;\n            }\n            _.each(data.answers, function (answer) {\n                result[answer._id] = answer.percent;\n            });\n            return result;\n        };\n        ;\n        Liveevent.prototype.getAnswersForSummary = function () {\n            var _this = this;\n            var url = Extension.config.backend.domain + Extension.config.engageform.presentationViewStats;\n            url = url.replace(':questionId', this.activePageId);\n            return Extension.$http.get(url).then(function (res) {\n                if ([200, 304].indexOf(res.status) !== -1) {\n                    return _this.summaryStatsUnification(res.data);\n                }\n                return Extension.$q.reject(res);\n            });\n        };\n        ;\n        Liveevent.prototype.updatePage = function (page) {\n            var _this = this;\n            console.log('[ Liveevent ] Update Page: ' + page._id, this.currentEngageform.navigation);\n            var __type = this.activePage ? (this.activePage.type + '') : null;\n            // Check if form and if so, send all inputs\n            if (__type && __type.indexOf('form') > -1) {\n                this.currentEngageform.navigation.pick(null, null, { quiet: true });\n            }\n            this.activePage = page;\n            this.activePageId = page._id;\n            this.currentEngageform.message = null;\n            this.currentEngageform.initPage(page);\n            // Add liveSettings\n            this.currentEngageform.liveSettings = page.liveSettings;\n            // Overwrite navigation\n            this.currentEngageform.navigation.enabled = false;\n            this.currentEngageform.navigation.position = 0;\n            this.currentEngageform.navigation.size = 1;\n            this.currentEngageform.navigation.hasStart = false;\n            this.currentEngageform.navigation.enabledStart = false;\n            this.currentEngageform.navigation.hasPrev = false;\n            this.currentEngageform.navigation.enabledPrev = false;\n            this.currentEngageform.navigation.hasNext = false;\n            this.currentEngageform.navigation.enabledNext = false;\n            this.currentEngageform.navigation.hasFinish = false;\n            this.currentEngageform.navigation.enabledFinish = false;\n            this.currentEngageform.navigation.distance = 0;\n            this.currentEngageform.navigation.prev = function ($event) { return; };\n            this.currentEngageform.navigation.next = function ($event, vcase) { return; };\n            this.currentEngageform.navigation.start = function ($event) { return; };\n            this.currentEngageform.navigation.finish = function ($event, vcase) { return; };\n            if (!this.currentEngageform.navigation.truePick) {\n                this.currentEngageform.navigation.truePick = this.currentEngageform.navigation.pick;\n            }\n            // Block pick if answers are not allowed\n            this.currentEngageform.navigation.pick = function (e, n, r) {\n                if (_this.currentEngageform.liveSettings.acceptResponses) {\n                    _this.currentEngageform.navigation.truePick(e, n, r);\n                }\n                else {\n                    _this.currentEngageform.message = 'Answers are currently not accepting';\n                }\n            };\n            if (Extension.mode === this.EF.Mode.Summary && this.currentEngageform.current && this.activePageId && _.has(Extension.config, 'engageform.presentationViewStats')) {\n                this.getAnswersForSummary().then(function (answersData) {\n                    _this.currentEngageform.current.updateAnswers(answersData);\n                });\n                this.currentEngageform.liveSettings.showAnswers = true;\n            }\n        };\n        Liveevent.prototype.removePage = function () {\n            var _this = this;\n            console.log('[ Liveevent ] Remove page');\n            Extension.$timeout(function () {\n                _this.activePage = null;\n                _this.activePageId = null;\n                if (_this.currentEngageform) {\n                    _this.currentEngageform.current = null;\n                    _this.currentEngageform.message = null;\n                }\n            });\n        };\n        Liveevent.prototype.updateQuiz = function (EF) {\n            this.currentEngageform = EF;\n            this.event.trigger('now::changed', EF);\n            console.log('[ Liveevent ] Update Quiz: ' + this.currentEngageform._engageformId);\n            if (!this.currentEngageform.navigation.truePick) {\n                this.currentEngageform.navigation.truePick = this.currentEngageform.navigation.pick;\n            }\n            this.activeQuiz = this.currentEngageform;\n            this.activeQuizId = this.currentEngageform._engageformId;\n        };\n        Liveevent.prototype.removeQuiz = function () {\n            var _this = this;\n            console.log('[ Liveevent ] Remove quiz');\n            Extension.$timeout(function () {\n                _this.activeQuiz = null;\n                _this.activeQuizId = null;\n                _this.currentEngageform = null;\n                if (_this.currentEngageform) {\n                    _this.currentEngageform.branding = null;\n                    _this.currentEngageform.current = null;\n                    _this.currentEngageform.message = null;\n                    _this.currentEngageform.meta = null;\n                    _this.currentEngageform.navigation = null;\n                    _this.currentEngageform.theme = null;\n                    _this.currentEngageform.title = null;\n                    _this.currentEngageform.type = null;\n                }\n            });\n        };\n        // Init chat\n        Liveevent.prototype.initChat = function (id) {\n            var deferred = Extension.$q.defer();\n            if (!this.chat && id) {\n                this.chat = new ChatModule.Chat(id, this);\n                return this.chat.init();\n            }\n            else {\n                // If it is already initialised (meaning it's available on this instance), return a fake promise that\n                // is here just to make the API looks better.\n                deferred.resolve();\n                return deferred.promise;\n            }\n        };\n        // Sockets\n        Liveevent.prototype.initSocket = function (opts) {\n            var _this = this;\n            console.log('[ Liveevent ] Init socket');\n            var url = Extension.config.backend.socket + Extension.config.liveEvent.socketNamespace;\n            url = url.replace(':liveEventId', opts.id);\n            this.socket = Extension.io.connect(url, { 'force new connection': true });\n            this.socket.on('connect', function () {\n                console.log('[ Liveevent:Socket ] Connected');\n                _this.socket.emit('getStatus', { liveEventId: opts.id });\n            });\n            this.socket.on('disconnect', this.initSocket);\n            this.socket.on('error', function (res) {\n                console.warn('[ Liveevent:Socket ] Error: ' + res);\n            });\n            this.socket.on('reconnecting', function () {\n                console.warn('[ Liveevent:Socket ] Reconnecting');\n            });\n            this.socket.on('reconnect_failed', function () {\n                console.warn('[ Liveevent:Socket ] Reconnect failed');\n            });\n            this.socket.on('reconnect', function () {\n                console.log('[ Liveevent:Socket ] Reconnect');\n                _this.socket.emit('getStatus', { liveEventId: opts.id });\n            });\n            this.socket.on('liveEventStatus', function (data) {\n                _this.chat.status = data.chatAvailable;\n                // Liveevent is off\n                if (!data.isActive) {\n                    console.log('[ Liveevent:Socket ] Liveevent is not active');\n                    _this.removePage();\n                    _this.removeQuiz();\n                    // Run callback\n                    if (opts.callback && opts.callback.liveEventStatus) {\n                        data.id = opts.id;\n                        opts.callback.liveEventStatus(data);\n                    }\n                    return;\n                }\n                if (data.activeQuestionId !== _this.activePageId || data.activeQuizId !== _this.activeQuizId) {\n                    // Quiz is off\n                    if (!data.activeQuizId) {\n                        console.log('[ Liveevent ] Quiz is empty');\n                        _this.removeQuiz();\n                        // Run callback\n                        if (opts.callback && opts.callback.liveEventStatus) {\n                            data.id = opts.id;\n                            opts.callback.liveEventStatus(data);\n                        }\n                        return;\n                    }\n                    _this.EF.init({ id: data.activeQuizId, mode: 'default', callback: { sendAnswerCallback: _this.sendAnswerCallback } }).then(function (res) {\n                        _this.updateQuiz(res);\n                    });\n                    // Page is off\n                    if (!data.activeQuestionId) {\n                        console.log('[ Liveevent ] Page is empty');\n                        _this.removePage();\n                        // Run callback\n                        if (opts.callback && opts.callback.liveEventStatus) {\n                            data.id = opts.id;\n                            opts.callback.liveEventStatus(data);\n                        }\n                        return;\n                    }\n                    // Quiz changed\n                    if (data.activeQuizId !== _this.activeQuizId) {\n                        console.log('[ Liveevent:Socket ] Quiz changed');\n                        _this.EF.init({ id: data.activeQuizId, mode: 'default', callback: { sendAnswerCallback: _this.sendAnswerCallback } }).then(function (res) {\n                            _this.updateQuiz(res);\n                            // Update Page\n                            _this.getPageById(data.activeQuestionId).then(function (page) {\n                                _this.updatePage(page);\n                            });\n                        });\n                    }\n                    else {\n                        // Only Page changed\n                        console.log('[ Liveevent:Socket ] Only Page changed');\n                        _this.getPageById(data.activeQuestionId).then(function (page) {\n                            _this.updatePage(page);\n                        });\n                    }\n                }\n                // Quiz and page is same, check if showAnswers or acceptResponses had change\n                if (_this.currentEngageform) {\n                    if (data.showAnswers !== _this.currentEngageform.liveSettings.showAnswers) {\n                        console.log('[ Liveevent ] Show answer option changed');\n                        Extension.$timeout(function () {\n                            _this.currentEngageform.liveSettings.showAnswers = data.showAnswers;\n                        });\n                    }\n                    if (data.acceptResponses !== _this.currentEngageform.liveSettings.acceptResponses) {\n                        console.log('[ Liveevent ] Accept responses option changed');\n                        Extension.$timeout(function () {\n                            _this.currentEngageform.liveSettings.acceptResponses = data.acceptResponses;\n                            _this.currentEngageform.message = '';\n                        });\n                    }\n                }\n                // Run callback\n                if (opts.callback && opts.callback.liveEventStatus) {\n                    data.id = opts.id;\n                    opts.callback.liveEventStatus(data);\n                }\n            });\n            this.socket.on('rateItQuestionStatus', function (data) {\n                _this.currentEngageform.current.updateAnswers(data);\n            });\n            this.socket.on('multipleChoiceQuestionAnswers', function (data) {\n                _this.currentEngageform.current.updateAnswers(data);\n            });\n            // Buzzer listening\n            this.socket.on('buzzerQuestionStatus', function (data) {\n                // Run callback\n                if (opts.callback && opts.callback.buzzerQuestionStatus) {\n                    data.id = opts.id;\n                    opts.callback.buzzerQuestionStatus(data);\n                }\n            });\n        };\n        // Get Liveevent\n        Liveevent.prototype.getById = function (id) {\n            var url = Extension.config.backend.domain + Extension.config.liveEvent.liveEventUrl;\n            url = url.replace(':liveEventId', id);\n            // TODO: Get quiz and current question\n            return Extension.$http.get(url).then(function (res) {\n                if ([200, 304].indexOf(res.status) !== -1) {\n                    return res.data;\n                }\n                return Extension.$q.reject(res);\n            });\n        };\n        // Get Page\n        Liveevent.prototype.getPageById = function (questionId) {\n            var url = Extension.config.backend.domain + Extension.config.liveEvent.activeQuestion;\n            url = url.replace(':questionId', questionId);\n            return Extension.$http.get(url).then(function (res) {\n                if ([200, 304].indexOf(res.status) !== -1) {\n                    console.log('[ Liveevent ] Get PAGE: ' + res.data['_id']);\n                    return res.data;\n                }\n                this.$q.reject(res);\n            });\n        };\n        Liveevent.prototype.init = function (opts) {\n            var _this = this;\n            console.log('[ Liveevent ] Init: ' + opts.id);\n            var deferred = Extension.$q.defer();\n            this.id = opts.id;\n            this.EF = opts.engageform;\n            this.sendAnswerCallback = opts.callback.sendAnswerCallback;\n            // Get Liveevent\n            this.getById(opts.id).then(function (res) {\n                // Init socket\n                _this.initSocket(opts);\n                // Init chat\n                _this.initChat(res.chatId).then(function () {\n                    // ...\n                });\n                deferred.resolve(_this);\n            });\n            return deferred.promise;\n        };\n        return Liveevent;\n    })();\n    Liveevent_1.Liveevent = Liveevent;\n})(Liveevent || (Liveevent = {}));\n\n/// <reference path=\"ichat.ts\" />\nvar ChatModule;\n(function (ChatModule) {\n    function featuredMessageNotify(oldValue, newValue, message) {\n        this._liveevent.event.trigger('chat::messageFeatureStatusChanged', this._liveevent.id, message, newValue);\n        return message;\n    }\n    function updateFeaturedStatus(oldValue, newValue, message) {\n        message.featured = newValue;\n        return message;\n    }\n    var Chat = (function () {\n        function Chat(id, liveevent) {\n            this.messages = [];\n            this.updateMessageHandlers = {};\n            console.log('[ Chat ] Constructor');\n            this.id = id;\n            this._liveevent = liveevent;\n            // Feature status handlers\n            this.registerUpdateMessageHandler('featured', updateFeaturedStatus);\n            this.registerUpdateMessageHandler('featured', featuredMessageNotify);\n        }\n        /**\n         * Registers handlers that will be invoked and will potentially modify the message on its data update.\n         * @param field\n         * @param handler\n         */\n        Chat.prototype.registerUpdateMessageHandler = function (field, handler) {\n            if (!this.updateMessageHandlers[field]) {\n                this.updateMessageHandlers[field] = [];\n            }\n            this.updateMessageHandlers[field].push(handler);\n        };\n        Chat.prototype.login = function (data, dataMe) {\n            this.user = {\n                accessToken: data.accessToken,\n                user: data.userID,\n                userLink: dataMe.link,\n                userName: dataMe.name,\n                userID: data.userID\n            };\n        };\n        Chat.prototype.logout = function () {\n            this.user = null;\n        };\n        Chat.prototype.updateChat = function (data) {\n            console.log('[ Chat ] Update chat');\n            this.id = data.id;\n            this.name = data.name;\n            this.premoderated = data.premoderated;\n            this.direction = data.chatDirection;\n            this.theme = data.theme;\n            // Get some old msgs\n            this.getMsgs();\n        };\n        Chat.prototype.sendMsg = function (m) {\n            console.log('[ Chat ] Posting msg');\n            if (!this.user)\n                return;\n            var url = Extension.config.backend.domain + Extension.config.chat.sendUrl, msg;\n            url = url.replace(':chatId', this.id);\n            msg = {\n                accessToken: this.user.accessToken,\n                date: Date.now(),\n                hidden: false,\n                id: this.user.userId,\n                msg: m,\n                user: this.user.user,\n                userLink: this.user.userLink,\n                userName: this.user.userName\n            };\n            return Extension.$http.post(url, msg);\n        };\n        Chat.prototype.getMsgs = function () {\n            var _this = this;\n            console.log('[ Chat ] Get old msgs');\n            var url = Extension.config.backend.domain + Extension.config.chat.messagesUrl;\n            url = url.replace(':chatId', this.id);\n            return Extension.$http.get(url).then(function (res) {\n                //console.log('[ Chat ] Got ' + res.data.length + ' msgs');\n                _this.messages = res.data;\n                if (_this.messages.length) {\n                    // Sort by newest\n                    _this.messages = _.sortBy(_this.messages, 'date').reverse();\n                    // Reverse msg order\n                    if (_this.direction && _this.direction === 'ttb') {\n                        _this.messages.reverse();\n                    }\n                }\n                _.forEach(_this.messages, function (message) {\n                    _this._liveevent.event.trigger('chat::message', _this._liveevent.id, message);\n                });\n            });\n        };\n        /**\n         * Handles updates of a message data, delegating data to handler functions.\n         * @param message\n         * @param newData\n         * @returns {IMessage}\n         */\n        Chat.prototype.handleNewMessageData = function (message, newData) {\n            var _this = this;\n            _.forOwn(newData, function (value, field) {\n                // When the value is different than it was before and there are handlers defined, call them.\n                if (value !== message[field] && _.isArray(_this.updateMessageHandlers[field])) {\n                    var oldValue = message[field];\n                    _.forEach(_this.updateMessageHandlers[field], function (handler) {\n                        handler.call(_this, oldValue, value, message);\n                    });\n                }\n            });\n            return message;\n        };\n        Chat.prototype.initSocket = function () {\n            var _this = this;\n            console.log('[ Chat:Socket ] Init socket');\n            var url = Extension.config.backend.socket;\n            this.socket = Extension.io.connect(url, { 'force new connection': true });\n            this.socket.on('error', function (res) {\n                console.warn(res);\n            });\n            this.socket.on('connect', function (data) {\n                console.log('[ Chat:Socket ] Connected');\n                // Join room\n                _this.socket.emit('joinRoom', _this.id);\n                // We can also leave room, to do so just emit 'leaveRoom' with roomId as param\n            });\n            // New msg event\n            this.socket.on('msg', function (data) {\n                console.log('[ Chat:Socket ] New msg');\n                // \"msg\" event is triggered not only when new message arrives, but also a message changes.\n                var existingMsg = _.find(_this.messages, 'id', data.id);\n                Extension.$rootScope.$apply(function () {\n                    if (existingMsg) {\n                        _this.handleNewMessageData(existingMsg, data);\n                    }\n                    else {\n                        if (_this.direction && _this.direction === 'ttb') {\n                            _this.messages.push(data);\n                        }\n                        else {\n                            _this.messages.unshift(data);\n                        }\n                    }\n                });\n                if (!existingMsg) {\n                    _this._liveevent.event.trigger('chat::message', _this._liveevent.id, data);\n                }\n            });\n            this.socket.on('msgHide', function (id) {\n                console.log('[ Chat:Socket] Hide msg');\n                _this._liveevent.event.trigger('chat::hideMessage', id);\n                var messageIndex = _this.messages.length;\n                for (var i = 0; i < _this.messages.length; i += 1) {\n                    if (_this.messages[i].id === id) {\n                        messageIndex = i;\n                    }\n                }\n                Extension.$rootScope.$apply(function () {\n                    _this.messages.splice(messageIndex, 1);\n                });\n            });\n            // On disconect\n            this.socket.on('disconnect', this.initSocket);\n        };\n        Chat.prototype.init = function () {\n            var _this = this;\n            console.log('[ Chat ] Init: ' + this.id);\n            // Get chat details\n            var url = Extension.config.backend.domain + Extension.config.chat.detailUrl;\n            url = url.replace(':chatId', this.id);\n            return Extension.$http.get(url).then(function (res) {\n                _this.updateChat(res.data);\n                _this.initSocket();\n                return res;\n            });\n        };\n        return Chat;\n    })();\n    ChatModule.Chat = Chat;\n})(ChatModule || (ChatModule = {}));\n\n/// <reference path=\"api/api.ts\" />\n/// <reference path=\"liveevent/liveevent.ts\" />\n/// <reference path=\"chat/chat.ts\" />\nvar Extension = (function () {\n    function Extension($http, $q, $timeout, localStorage, $rootScope, ApiConfig) {\n        Extension.$http = $http;\n        Extension.$timeout = $timeout;\n        Extension.$q = $q;\n        Extension.localStorage = localStorage;\n        Extension.config = ApiConfig;\n        Extension.$rootScope = $rootScope;\n    }\n    Extension.prototype.init = function (opts) {\n        if (Extension._instances[opts.id]) {\n            return Extension._instances[opts.id];\n        }\n        Extension.io = opts.io;\n        switch (opts.mode) {\n            case 'summary':\n                Extension.mode = opts.engageform.Mode.Summary;\n                break;\n            case 'default':\n            case '':\n            case undefined:\n                Extension.mode = opts.engageform.Mode.Default;\n                break;\n            default:\n                return Extension.$q.reject({\n                    status: 'error',\n                    error: {\n                        code: 406,\n                        message: 'Mode property not supported.'\n                    },\n                    data: opts\n                });\n        }\n        ;\n        var liveEvent = new Liveevent.Liveevent();\n        if (!opts.callback) {\n            opts.callback = {\n                sendAnswerCallback: function () { }\n            };\n        }\n        else if (!opts.callback.sendAnswerCallback) {\n            opts.callback.sendAnswerCallback = function () { };\n        }\n        return Extension._instances[opts.id] = liveEvent.init(opts);\n    };\n    Extension._instances = {};\n    return Extension;\n})();\nExtension.$inject = ['$http', '$q', '$timeout', 'localStorageService', '$rootScope', 'ApiConfig'];\napp.service('Liveevent', Extension);\n\n/// <reference path=\"api/iembed.ts\" />\n/// <reference path=\"api/iquizquestion.ts\" />\n/// <reference path=\"api/iquizquestionsres.ts\" />\n/// <reference path=\"api/iquizquestionanswer.ts\" />\n/// <reference path=\"api/iquizquestionanswerres.ts\" />\n/// <reference path=\"api/iquiz.ts\" />\n/// <reference path=\"api/iquizres.ts\" />\n/// <reference path=\"api/iquizfinish.ts\" />\n/// <reference path=\"api/iquizfinishres.ts\" />\n/// <reference path=\"page/enum.ts\" />\n/// <reference path=\"page/icase.ts\" />\n/// <reference path=\"page/ipage.ts\" />\n/// <reference path=\"page/ipages.ts\" />\n/// <reference path=\"page/ipagesent.ts\" />\n/// <reference path=\"page/isettings.ts\" />\n/// <reference path=\"engageform/enum.ts\" />\n/// <reference path=\"engageform/iengageform.ts\" />\n/// <reference path=\"engageform/isettings.ts\" />\n/// <reference path=\"engageform/itheme.ts\" />\n/// <reference path=\"engageform/itabs.ts\" />\n/// <reference path=\"branding/ibranding.ts\" />\n/// <reference path=\"navigation/inavigation.ts\" /> \n\nvar Util;\n(function (Util) {\n    var Event = (function () {\n        function Event() {\n            this._listener = {};\n        }\n        /**\n         * Register callback for given event.\n         *\n         * @param {String} event\n         * @param {Function} callback\n         */\n        Event.prototype.listen = function (event, callback) {\n            console.log('[ Util:Event ] listen', event);\n            if (!this._listener[event]) {\n                this._listener[event] = [];\n            }\n            this._listener[event].push(callback);\n        };\n        /**\n         * Removes one or all calbacks from the registered listeners.\n         *\n         * @param {String} event\n         * @param {Function} callback\n           */\n        Event.prototype.unsubscribe = function (event, callback) {\n            console.log('[ Util:Event ] unsubscribe', event);\n            if (this._listener[event]) {\n                if (!callback) {\n                    this._listener[event].length = 0;\n                }\n                else {\n                    _.pull(this._listener[event], callback);\n                }\n            }\n        };\n        /**\n         * Fire event with given arguments.\n         *\n         * @param {string} event\n         * @param {args...} data\n         */\n        Event.prototype.trigger = function (event) {\n            var data = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                data[_i - 1] = arguments[_i];\n            }\n            console.log('[ Util:Event ] trigger', event);\n            var args = Array.apply(null, arguments).slice(1);\n            var listeners = this._listener[event];\n            if (!listeners) {\n                return;\n            }\n            for (var i = 0; i < listeners.length; i++) {\n                listeners[i].apply(null, args);\n            }\n        };\n        return Event;\n    })();\n    Util.Event = Event;\n})(Util || (Util = {}));\n})(angular);\n//# sourceMappingURL=liveevent.js.map",null,null,"/// <reference path=\"api/api.ts\" />\n/// <reference path=\"liveevent/liveevent.ts\" />\n/// <reference path=\"chat/chat.ts\" />\n\nclass Extension {\n  static $http: ng.IHttpService;\n  static $q: ng.IQService;\n  static $timeout: ng.ITimeoutService;\n  static localStorage: ng.local.storage.ILocalStorageService;\n  static $rootScope: ng.IRootScopeService;\n  static config;\n  static io: SocketIOClientStatic;\n  Liveevent: Liveevent.ILiveevent;\n\n  private static _instances: Liveevent.ILiveeventInstances = {};\n\n  constructor($http: ng.IHttpService, $q: ng.IQService, $timeout: ng.ITimeoutService, localStorage: ng.local.storage.ILocalStorageService, $rootScope: ng.IRootScopeService, ApiConfig) {\n    Extension.$http = $http;\n    Extension.$timeout = $timeout;\n    Extension.$q = $q;\n    Extension.localStorage = localStorage;\n    Extension.config = ApiConfig;\n    Extension.$rootScope = $rootScope;\n  }\n\n  init(opts: API.ILiveEmbed): ng.IPromise<Liveevent.ILiveevent> {\n    if (Extension._instances[opts.id]) {\n      return Extension._instances[opts.id];\n    }\n\n    Extension.io = <SocketIOClientStatic>opts.io;\n\n    switch (opts.mode) {\n      case 'summary':\n        Extension.mode = opts.engageform.Mode.Summary;\n        break;\n      case 'default':\n      case '':\n      case undefined:\n        Extension.mode = opts.engageform.Mode.Default;\n        break;\n      default:\n        return Extension.$q.reject({\n          status: 'error',\n          error: {\n            code: 406,\n            message: 'Mode property not supported.'\n          },\n          data: opts\n        });\n    };\n\n    var liveEvent = new Liveevent.Liveevent();\n\n    if (!opts.callback) {\n      opts.callback = {\n        sendAnswerCallback: function(){}\n      }\n    } else if (!opts.callback.sendAnswerCallback) {\n      opts.callback.sendAnswerCallback = function(){};\n    }\n\n    return Extension._instances[opts.id] = liveEvent.init(opts);\n  }\n}\n\nExtension.$inject = ['$http', '$q', '$timeout', 'localStorageService', '$rootScope', 'ApiConfig'];\napp.service('Liveevent', Extension);\n",null],"sourceRoot":"/source/"}