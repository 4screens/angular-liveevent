{"version":3,"sources":["/source/app.ts","/source/liveevent/liveevent.ts","/source/chat/chat.ts","liveevent.js","/source/bootstrap.ts"],"names":["app","angular","module","Liveevent","Liveevent_1","Liveevent.Liveevent","Liveevent.Liveevent.constructor","Liveevent.Liveevent.updatePage","Liveevent.Liveevent.removePage","Liveevent.Liveevent.updateQuiz","Liveevent.Liveevent.removeQuiz","Liveevent.Liveevent.initChat","Liveevent.Liveevent.initSocket","Liveevent.Liveevent.getById","Liveevent.Liveevent.getPageById","indexOf","res","status","console","log","data","this","$q","reject","Liveevent.Liveevent.init","ChatModule","ChatModule.Chat","ChatModule.Chat.constructor","ChatModule.Chat.login","ChatModule.Chat.logout","ChatModule.Chat.updateChat","ChatModule.Chat.sendMsg","ChatModule.Chat.getMsgs","ChatModule.Chat.initSocket","ChatModule.Chat.init","Extension","Extension.constructor","Extension.init","$inject","service"],"mappings":"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","file":"liveevent.min.js","sourcesContent":["/// <reference path=\"../typings/tsd.d.ts\" />\n\nvar app = angular.module('4screens.liveevent', ['LocalStorageModule']);","/// <reference path=\"iliveevent.ts\" />\n\nmodule Liveevent {\n  export class Liveevent implements ILiveevent {\n    enabled: boolean;\n    title: string;\n\n    activePage: Page.IPage;\n    activeQuiz: Engageform.IEngageform;\n    activePageId: string;\n    activeQuizId: string;\n    socket: SocketIOClient.Socket;\n    EF: Engageform.IEngageform;\n    chat: ChatModule.IChat;\n\n    constructor() {\n      console.log('[ Liveevent ] Constructor');\n    }\n\n    private updatePage(page) {\n      console.log('[ Liveevent ] Update Page: ' + page._id);\n\n      var __type = this.activePage ? (this.activePage.type + '') : null;\n\n      // Check if form and if so, send all inputs\n      if (__type && __type.indexOf('form') > -1) {\n        this.EF['_engageform'].navigation.pick(null, null, {quiet: true});\n      }\n\n      this.activePage = page;\n      this.activePageId = page._id;\n      this.EF['_engageform'].initPage(page); // ts compiler ..\n\n      // Add liveSettings\n      this.EF.current.liveSettings = <Page.ILiveSetting>page.liveSettings;\n\n      // Overwrite navigation\n      this.EF['_engageform'].navigation.enabled = false;\n      this.EF['_engageform'].navigation.position = 0;\n      this.EF['_engageform'].navigation.size = 1;\n      this.EF['_engageform'].navigation.hasStart = false;\n      this.EF['_engageform'].navigation.enabledStart = false;\n      this.EF['_engageform'].navigation.hasPrev = false;\n      this.EF['_engageform'].navigation.enabledPrev = false;\n      this.EF['_engageform'].navigation.hasNext = false;\n      this.EF['_engageform'].navigation.enabledNext = false;\n      this.EF['_engageform'].navigation.hasFinish = false;\n      this.EF['_engageform'].navigation.enabledFinish = false;\n      this.EF['_engageform'].navigation.distance = 0;\n      this.EF['_engageform'].navigation.prev = ($event) => { return; };\n      this.EF['_engageform'].navigation.next = ($event, vcase: Page.ICase) => { return; };\n      this.EF['_engageform'].navigation.start = ($event) => { return; };\n      this.EF['_engageform'].navigation.finish = ($event, vcase: Page.ICase) => { return; };\n    }\n\n    private removePage() {\n      console.log('[ Liveevent ] Remove page');\n      Extension.$timeout(() => {\n        this.activePage = null;\n        this.activePageId = null;\n\n        if (this.EF['_engageform']) {\n          this.EF['_engageform'].current = null;\n          this.EF['_engageform'].message = null;\n        }\n      });\n    }\n\n    private updateQuiz(EF) {\n      console.log('[ Liveevent ] Update Quiz: ' + EF._engageformId);\n\n      this.activeQuiz = EF;\n      this.activeQuizId = EF._engageformId;\n    }\n\n    private removeQuiz() {\n      console.log('[ Liveevent ] Remove quiz');\n      Extension.$timeout(() => {\n        this.activeQuiz = null;\n        this.activeQuizId = null;\n\n        if (this.EF['_engageform']) {\n          this.EF['_engageform'].branding = null;\n          this.EF['_engageform'].current = null;\n          this.EF['_engageform'].message = null;\n          this.EF['_engageform'].meta = null;\n          this.EF['_engageform'].navigation = null;\n          this.EF['_engageform'].theme = null;\n          this.EF['_engageform'].title = null;\n          this.EF['_engageform'].type = null;\n        }\n      });\n    }\n\n    // Init chat\n    private initChat(id: string): ng.IPromise<any> {\n      var deferred = Extension.$q.defer();\n\n      if (!this.chat) {\n        this.chat = new ChatModule.Chat(id);\n\n        return this.chat.init();\n      } else {\n        // If it is already initialised (meaning it's available on this instance), return a fake promise that\n        // is here just to make the API looks better.\n        deferred.resolve();\n        return deferred.promise;\n      }\n    }\n\n    // Sockets\n    private initSocket(opts: API.ILiveEmbed) {\n      console.log('[ Liveevent ] Init socket');\n      var url = Extension.config.backend.socket + Extension.config.liveEvent.socketNamespace;\n      url = url.replace(':liveEventId', opts.id);\n      this.socket = Extension.io.connect(url, { 'force new connection': true });\n\n      this.socket.on('connect', () => {\n        console.log('[ Liveevent:Socket ] Connected');\n        this.socket.emit('getStatus', { liveEventId: opts.id });\n      });\n\n      this.socket.on('disconnect', this.initSocket);\n\n      this.socket.on('error', (res) => {\n        console.warn(res);\n      });\n\n      this.socket.on('liveEventStatus', (data) => {\n\n        // Liveevent is off\n        if (!data.isActive) {\n          console.log('[ Liveevent:Socket ] Liveevent is not active');\n          this.removePage();\n          this.removeQuiz();\n\n          return;\n        }\n\n        if (data.activeQuestionId !== this.activePageId || data.activeQuizId !== this.activeQuizId) {\n\n          // Quiz is off\n          if (!data.activeQuizId) {\n            console.log('[ Liveevent ] Quiz is empty');\n            this.removeQuiz();\n\n            return;\n          }\n\n          // Page is off\n          if (!data.activeQuestionId) {\n            console.log('[ Liveevent ] Page is empty');\n            this.removePage();\n\n            return;\n          }\n\n\n          // Quiz changed\n          if (data.activeQuizId !== this.activeQuizId) {\n            console.log('[ Liveevent:Socket ] Quiz changed');\n            this.EF.init({ id: data.activeQuizId, mode: 'default' }).then((res) => {\n              this.updateQuiz(res);\n\n              // Update Page\n              this.getPageById(data.activeQuestionId).then((page) => {\n                this.updatePage(page);\n              });\n            });\n          } else {\n            // Only Page changed\n            console.log('[ Liveevent:Socket ] Only Page changed');\n            this.getPageById(data.activeQuestionId).then((page) => {\n              this.updatePage(page);\n            });\n          }\n        }\n\n        // Quiz and page is same, check if showAnswers had change\n        if (this.EF.current && data.showAnswers !== this.EF.current.liveSettings.showAnswers) {\n          console.log('[ Liveevent ] Show answer option changed');\n\n          Extension.$timeout(() => {\n            this.EF.current.liveSettings.showAnswers = !this.EF.current.liveSettings.showAnswers;\n          });\n        }\n      });\n\n      this.socket.on('multipleChoiceQuestionAnswers', (data) => {\n        this.EF.current.updateAnswers(data);\n      });\n    }\n\n    // Get Liveevent\n    getById(id: string): ng.IPromise<ILiveeventResponse> {\n      var url = Extension.config.backend.domain + Extension.config.liveEvent.liveEventUrl;\n      url = url.replace(':liveEventId', id);\n\n      // TODO: Get quiz and current question\n      return Extension.$http.get(url).then((res) => {\n        if ([200, 304].indexOf(res.status) !== -1) {\n          return res.data;\n        }\n\n        return Extension.$q.reject(res);\n      });\n    }\n\n    // Get Page\n    private getPageById(questionId: string) {\n      var url = Extension.config.backend.domain + Extension.config.liveEvent.activeQuestion;\n      url = url.replace(':questionId', questionId);\n\n      return Extension.$http.get(url).then(function(res) {\n\n        if ([200, 304].indexOf(res.status) !== -1) {\n          console.log('[ Liveevent ] Get PAGE: ' + res.data['_id']);\n          return res.data;\n        }\n\n          this.$q.reject(res);\n      });\n    }\n\n    init(opts: API.ILiveEmbed) {\n      console.log('[ Liveevent ] Init: ' + opts.id);\n      var deferred = Extension.$q.defer();\n\n      this.EF = opts.engageform;\n\n      // Get Liveevent\n      this.getById(opts.id).then((res) => {\n\n        // Init socket\n        this.initSocket(opts);\n\n        // Init chat\n        this.initChat(res.chatId).then(() => {\n          // ...\n        });\n        deferred.resolve(this);\n      });\n\n      return deferred.promise;\n    }\n  }\n}\n","/// <reference path=\"ichat.ts\" />\n\nmodule ChatModule {\n  export class Chat implements IChat {\n    id: string;\n    name: string;\n    premoderated: boolean;\n    socket: SocketIOClient.Socket;\n    messages: IMessage[] = [];\n    user: IUser;\n\n    constructor(id: string) {\n      console.log('[ Chat ] Constructor');\n      this.id = id;\n\n      return this;\n    }\n\n    private login(data: IFbAuth, dataMe: any) { // FIXME: dateMe FB interface (v2.3 or 2.2) ?\n      this.user = {\n        accessToken: data.accessToken,\n        user: data.userID,\n        userLink: dataMe.link,\n        userName: dataMe.name,\n        userID: data.userID\n      };\n    }\n\n    private logout():void {\n      this.user = null;\n    }\n\n    private updateChat(data) {\n      console.log('[ Chat ] Update chat');\n      this.id = data.id;\n      this.name = data.name;\n      this.premoderated = data.premoderated;\n\n      // Get some old msgs\n      this.getMsgs();\n    }\n\n    private sendMsg(m: IMessage) {\n      console.log('[ Chat ] Posting msg');\n\n      if (!this.user) return;\n\n      var url = Extension.config.backend.domain + Extension.config.chat.sendUrl, msg;\n      url = url.replace(':chatId', this.id);\n\n      msg = {\n        accessToken: this.user.accessToken,\n        date: Date.now(),\n        hidden: false,\n        id: this.user.userId,\n        msg: m,\n        user: this.user.user,\n        userLink: this.user.userLink,\n        userName: this.user.userName\n      };\n\n      return Extension.$http.post(url, msg);\n    }\n\n    private getMsgs() {\n      console.log('[ Chat ] Get old msgs');\n      var url = Extension.config.backend.domain + Extension.config.chat.messagesUrl;\n      url = url.replace(':chatId', this.id);\n      return Extension.$http.get(url).then((res) => {\n        //console.log('[ Chat ] Got ' + res.data.length + ' msgs');\n        this.messages = <IMessage[]>res.data;\n      });\n    }\n\n    private initSocket() {\n      console.log('[ Chat:Socket ] Init socket');\n\n      var url = Extension.config.backend.socket;\n\n      this.socket = Extension.io.connect(url, { 'force new connection': true });\n\n      this.socket.on('error', (res) => {\n        console.warn(res);\n      });\n\n      this.socket.on('connect', (data) => {\n        console.log('[ Chat:Socket ] Connected');\n\n        // Join room\n        this.socket.emit('joinRoom', this.id);\n        // We can also leave room, to do so just emit 'leaveRoom' with roomId as param\n      });\n\n      // New msg event\n      this.socket.on('msg', (data) => {\n        console.log('[ Chat:Socket ] New msg');\n        Extension.$rootScope.$apply(() => {\n          this.messages.unshift(<IMessage>data);\n        })\n      });\n\n      this.socket.on('msgHide', (id) => {\n        console.log('[ Chat:Socket] Hide msg');\n\n        var messageIndex = this.messages.length;\n\n        for (var i = 0; i < this.messages.length; i += 1) {\n          if (this.messages[i].id === id) {\n            messageIndex = i;\n          }\n        }\n\n        Extension.$rootScope.$apply(() => {\n          this.messages.splice(messageIndex, 1);\n        });\n      });\n\n      // On disconect\n      this.socket.on('disconnect', this.initSocket);\n    }\n\n    init():ng.IPromise<IChatResponse> {\n      console.log('[ Chat ] Init: ' + this.id);\n\n      // Get chat details\n      var url = Extension.config.backend.domain + Extension.config.chat.detailUrl;\n      url = url.replace(':chatId', this.id);\n      return Extension.$http.get(url).then((res: IChatResponse) => {\n        this.updateChat(res.data);\n        this.initSocket();\n        return res;\n      });\n    }\n  }\n}\n","/// <reference path=\"../typings/tsd.d.ts\" />\nvar app = angular.module('4screens.liveevent', ['LocalStorageModule']);\n\n/// <reference path=\"iliveevent.ts\" />\nvar Liveevent;\n(function (Liveevent_1) {\n    var Liveevent = (function () {\n        function Liveevent() {\n            console.log('[ Liveevent ] Constructor');\n        }\n        Liveevent.prototype.updatePage = function (page) {\n            console.log('[ Liveevent ] Update Page: ' + page._id);\n            var __type = this.activePage ? (this.activePage.type + '') : null;\n            // Check if form and if so, send all inputs\n            if (__type && __type.indexOf('form') > -1) {\n                this.EF['_engageform'].navigation.pick(null, null, { quiet: true });\n            }\n            this.activePage = page;\n            this.activePageId = page._id;\n            this.EF['_engageform'].initPage(page); // ts compiler ..\n            // Add liveSettings\n            this.EF.current.liveSettings = page.liveSettings;\n            // Overwrite navigation\n            this.EF['_engageform'].navigation.enabled = false;\n            this.EF['_engageform'].navigation.position = 0;\n            this.EF['_engageform'].navigation.size = 1;\n            this.EF['_engageform'].navigation.hasStart = false;\n            this.EF['_engageform'].navigation.enabledStart = false;\n            this.EF['_engageform'].navigation.hasPrev = false;\n            this.EF['_engageform'].navigation.enabledPrev = false;\n            this.EF['_engageform'].navigation.hasNext = false;\n            this.EF['_engageform'].navigation.enabledNext = false;\n            this.EF['_engageform'].navigation.hasFinish = false;\n            this.EF['_engageform'].navigation.enabledFinish = false;\n            this.EF['_engageform'].navigation.distance = 0;\n            this.EF['_engageform'].navigation.prev = function ($event) { return; };\n            this.EF['_engageform'].navigation.next = function ($event, vcase) { return; };\n            this.EF['_engageform'].navigation.start = function ($event) { return; };\n            this.EF['_engageform'].navigation.finish = function ($event, vcase) { return; };\n        };\n        Liveevent.prototype.removePage = function () {\n            var _this = this;\n            console.log('[ Liveevent ] Remove page');\n            Extension.$timeout(function () {\n                _this.activePage = null;\n                _this.activePageId = null;\n                if (_this.EF['_engageform']) {\n                    _this.EF['_engageform'].current = null;\n                    _this.EF['_engageform'].message = null;\n                }\n            });\n        };\n        Liveevent.prototype.updateQuiz = function (EF) {\n            console.log('[ Liveevent ] Update Quiz: ' + EF._engageformId);\n            this.activeQuiz = EF;\n            this.activeQuizId = EF._engageformId;\n        };\n        Liveevent.prototype.removeQuiz = function () {\n            var _this = this;\n            console.log('[ Liveevent ] Remove quiz');\n            Extension.$timeout(function () {\n                _this.activeQuiz = null;\n                _this.activeQuizId = null;\n                if (_this.EF['_engageform']) {\n                    _this.EF['_engageform'].branding = null;\n                    _this.EF['_engageform'].current = null;\n                    _this.EF['_engageform'].message = null;\n                    _this.EF['_engageform'].meta = null;\n                    _this.EF['_engageform'].navigation = null;\n                    _this.EF['_engageform'].theme = null;\n                    _this.EF['_engageform'].title = null;\n                    _this.EF['_engageform'].type = null;\n                }\n            });\n        };\n        // Init chat\n        Liveevent.prototype.initChat = function (id) {\n            var deferred = Extension.$q.defer();\n            if (!this.chat) {\n                this.chat = new ChatModule.Chat(id);\n                return this.chat.init();\n            }\n            else {\n                // If it is already initialised (meaning it's available on this instance), return a fake promise that\n                // is here just to make the API looks better.\n                deferred.resolve();\n                return deferred.promise;\n            }\n        };\n        // Sockets\n        Liveevent.prototype.initSocket = function (opts) {\n            var _this = this;\n            console.log('[ Liveevent ] Init socket');\n            var url = Extension.config.backend.socket + Extension.config.liveEvent.socketNamespace;\n            url = url.replace(':liveEventId', opts.id);\n            this.socket = Extension.io.connect(url, { 'force new connection': true });\n            this.socket.on('connect', function () {\n                console.log('[ Liveevent:Socket ] Connected');\n                _this.socket.emit('getStatus', { liveEventId: opts.id });\n            });\n            this.socket.on('disconnect', this.initSocket);\n            this.socket.on('error', function (res) {\n                console.warn(res);\n            });\n            this.socket.on('liveEventStatus', function (data) {\n                // Liveevent is off\n                if (!data.isActive) {\n                    console.log('[ Liveevent:Socket ] Liveevent is not active');\n                    _this.removePage();\n                    _this.removeQuiz();\n                    return;\n                }\n                if (data.activeQuestionId !== _this.activePageId || data.activeQuizId !== _this.activeQuizId) {\n                    // Quiz is off\n                    if (!data.activeQuizId) {\n                        console.log('[ Liveevent ] Quiz is empty');\n                        _this.removeQuiz();\n                        return;\n                    }\n                    // Page is off\n                    if (!data.activeQuestionId) {\n                        console.log('[ Liveevent ] Page is empty');\n                        _this.removePage();\n                        return;\n                    }\n                    // Quiz changed\n                    if (data.activeQuizId !== _this.activeQuizId) {\n                        console.log('[ Liveevent:Socket ] Quiz changed');\n                        _this.EF.init({ id: data.activeQuizId, mode: 'default' }).then(function (res) {\n                            _this.updateQuiz(res);\n                            // Update Page\n                            _this.getPageById(data.activeQuestionId).then(function (page) {\n                                _this.updatePage(page);\n                            });\n                        });\n                    }\n                    else {\n                        // Only Page changed\n                        console.log('[ Liveevent:Socket ] Only Page changed');\n                        _this.getPageById(data.activeQuestionId).then(function (page) {\n                            _this.updatePage(page);\n                        });\n                    }\n                }\n                // Quiz and page is same, check if showAnswers had change\n                if (_this.EF.current && data.showAnswers !== _this.EF.current.liveSettings.showAnswers) {\n                    console.log('[ Liveevent ] Show answer option changed');\n                    Extension.$timeout(function () {\n                        _this.EF.current.liveSettings.showAnswers = !_this.EF.current.liveSettings.showAnswers;\n                    });\n                }\n            });\n            this.socket.on('multipleChoiceQuestionAnswers', function (data) {\n                _this.EF.current.updateAnswers(data);\n            });\n        };\n        // Get Liveevent\n        Liveevent.prototype.getById = function (id) {\n            var url = Extension.config.backend.domain + Extension.config.liveEvent.liveEventUrl;\n            url = url.replace(':liveEventId', id);\n            // TODO: Get quiz and current question\n            return Extension.$http.get(url).then(function (res) {\n                if ([200, 304].indexOf(res.status) !== -1) {\n                    return res.data;\n                }\n                return Extension.$q.reject(res);\n            });\n        };\n        // Get Page\n        Liveevent.prototype.getPageById = function (questionId) {\n            var url = Extension.config.backend.domain + Extension.config.liveEvent.activeQuestion;\n            url = url.replace(':questionId', questionId);\n            return Extension.$http.get(url).then(function (res) {\n                if ([200, 304].indexOf(res.status) !== -1) {\n                    console.log('[ Liveevent ] Get PAGE: ' + res.data['_id']);\n                    return res.data;\n                }\n                this.$q.reject(res);\n            });\n        };\n        Liveevent.prototype.init = function (opts) {\n            var _this = this;\n            console.log('[ Liveevent ] Init: ' + opts.id);\n            var deferred = Extension.$q.defer();\n            this.EF = opts.engageform;\n            // Get Liveevent\n            this.getById(opts.id).then(function (res) {\n                // Init socket\n                _this.initSocket(opts);\n                // Init chat\n                _this.initChat(res.chatId).then(function () {\n                    // ...\n                });\n                deferred.resolve(_this);\n            });\n            return deferred.promise;\n        };\n        return Liveevent;\n    })();\n    Liveevent_1.Liveevent = Liveevent;\n})(Liveevent || (Liveevent = {}));\n\n/// <reference path=\"ichat.ts\" />\nvar ChatModule;\n(function (ChatModule) {\n    var Chat = (function () {\n        function Chat(id) {\n            this.messages = [];\n            console.log('[ Chat ] Constructor');\n            this.id = id;\n            return this;\n        }\n        Chat.prototype.login = function (data, dataMe) {\n            this.user = {\n                accessToken: data.accessToken,\n                user: data.userID,\n                userLink: dataMe.link,\n                userName: dataMe.name,\n                userID: data.userID\n            };\n        };\n        Chat.prototype.logout = function () {\n            this.user = null;\n        };\n        Chat.prototype.updateChat = function (data) {\n            console.log('[ Chat ] Update chat');\n            this.id = data.id;\n            this.name = data.name;\n            this.premoderated = data.premoderated;\n            // Get some old msgs\n            this.getMsgs();\n        };\n        Chat.prototype.sendMsg = function (m) {\n            console.log('[ Chat ] Posting msg');\n            if (!this.user)\n                return;\n            var url = Extension.config.backend.domain + Extension.config.chat.sendUrl, msg;\n            url = url.replace(':chatId', this.id);\n            msg = {\n                accessToken: this.user.accessToken,\n                date: Date.now(),\n                hidden: false,\n                id: this.user.userId,\n                msg: m,\n                user: this.user.user,\n                userLink: this.user.userLink,\n                userName: this.user.userName\n            };\n            return Extension.$http.post(url, msg);\n        };\n        Chat.prototype.getMsgs = function () {\n            var _this = this;\n            console.log('[ Chat ] Get old msgs');\n            var url = Extension.config.backend.domain + Extension.config.chat.messagesUrl;\n            url = url.replace(':chatId', this.id);\n            return Extension.$http.get(url).then(function (res) {\n                //console.log('[ Chat ] Got ' + res.data.length + ' msgs');\n                _this.messages = res.data;\n            });\n        };\n        Chat.prototype.initSocket = function () {\n            var _this = this;\n            console.log('[ Chat:Socket ] Init socket');\n            var url = Extension.config.backend.socket;\n            this.socket = Extension.io.connect(url, { 'force new connection': true });\n            this.socket.on('error', function (res) {\n                console.warn(res);\n            });\n            this.socket.on('connect', function (data) {\n                console.log('[ Chat:Socket ] Connected');\n                // Join room\n                _this.socket.emit('joinRoom', _this.id);\n                // We can also leave room, to do so just emit 'leaveRoom' with roomId as param\n            });\n            // New msg event\n            this.socket.on('msg', function (data) {\n                console.log('[ Chat:Socket ] New msg');\n                Extension.$rootScope.$apply(function () {\n                    _this.messages.unshift(data);\n                });\n            });\n            this.socket.on('msgHide', function (id) {\n                console.log('[ Chat:Socket] Hide msg');\n                var messageIndex = _this.messages.length;\n                for (var i = 0; i < _this.messages.length; i += 1) {\n                    if (_this.messages[i].id === id) {\n                        messageIndex = i;\n                    }\n                }\n                Extension.$rootScope.$apply(function () {\n                    _this.messages.splice(messageIndex, 1);\n                });\n            });\n            // On disconect\n            this.socket.on('disconnect', this.initSocket);\n        };\n        Chat.prototype.init = function () {\n            var _this = this;\n            console.log('[ Chat ] Init: ' + this.id);\n            // Get chat details\n            var url = Extension.config.backend.domain + Extension.config.chat.detailUrl;\n            url = url.replace(':chatId', this.id);\n            return Extension.$http.get(url).then(function (res) {\n                _this.updateChat(res.data);\n                _this.initSocket();\n                return res;\n            });\n        };\n        return Chat;\n    })();\n    ChatModule.Chat = Chat;\n})(ChatModule || (ChatModule = {}));\n\n/// <reference path=\"api/api.ts\" />\n/// <reference path=\"liveevent/liveevent.ts\" />\n/// <reference path=\"chat/chat.ts\" />\nvar Extension = (function () {\n    function Extension($http, $q, $timeout, localStorage, $rootScope, ApiConfig) {\n        Extension.$http = $http;\n        Extension.$timeout = $timeout;\n        Extension.$q = $q;\n        Extension.localStorage = localStorage;\n        Extension.config = ApiConfig;\n        Extension.$rootScope = $rootScope;\n    }\n    Extension.prototype.init = function (opts) {\n        Extension.io = opts.io;\n        var liveevent = new Liveevent.Liveevent;\n        return liveevent.init(opts);\n    };\n    return Extension;\n})();\nExtension.$inject = ['$http', '$q', '$timeout', 'localStorageService', '$rootScope', 'ApiConfig'];\napp.service('Liveevent', Extension);\n\n/// <reference path=\"api/iembed.ts\" />\n/// <reference path=\"api/iquizquestion.ts\" />\n/// <reference path=\"api/iquizquestionsres.ts\" />\n/// <reference path=\"api/iquizquestionanswer.ts\" />\n/// <reference path=\"api/iquizquestionanswerres.ts\" />\n/// <reference path=\"api/iquiz.ts\" />\n/// <reference path=\"api/iquizres.ts\" />\n/// <reference path=\"api/iquizfinish.ts\" />\n/// <reference path=\"api/iquizfinishres.ts\" />\n/// <reference path=\"page/enum.ts\" />\n/// <reference path=\"page/icase.ts\" />\n/// <reference path=\"page/ipage.ts\" />\n/// <reference path=\"page/ipages.ts\" />\n/// <reference path=\"page/ipagesent.ts\" />\n/// <reference path=\"page/isettings.ts\" />\n/// <reference path=\"engageform/enum.ts\" />\n/// <reference path=\"engageform/iengageform.ts\" />\n/// <reference path=\"engageform/isettings.ts\" />\n/// <reference path=\"engageform/itheme.ts\" />\n/// <reference path=\"branding/ibranding.ts\" />\n/// <reference path=\"navigation/inavigation.ts\" /> \n\n//# sourceMappingURL=liveevent.js.map","/// <reference path=\"api/api.ts\" />\n/// <reference path=\"liveevent/liveevent.ts\" />\n/// <reference path=\"chat/chat.ts\" />\n\nclass Extension {\n  static $http: ng.IHttpService;\n  static $q: ng.IQService;\n  static $timeout: ng.ITimeoutService;\n  static localStorage: ng.local.storage.ILocalStorageService;\n  static $rootScope: ng.IRootScopeService;\n  static config;\n  static io: SocketIOClientStatic;\n  Liveevent: Liveevent.ILiveevent;\n\n  constructor($http: ng.IHttpService, $q: ng.IQService, $timeout: ng.ITimeoutService, localStorage: ng.local.storage.ILocalStorageService, $rootScope: ng.IRootScopeService, ApiConfig) {\n    Extension.$http = $http;\n    Extension.$timeout = $timeout;\n    Extension.$q = $q;\n    Extension.localStorage = localStorage;\n    Extension.config = ApiConfig;\n    Extension.$rootScope = $rootScope;\n  }\n\n  init(opts: API.ILiveEmbed) {\n    Extension.io = <SocketIOClientStatic>opts.io;\n\n    var liveevent = new Liveevent.Liveevent;\n    return liveevent.init(opts);\n  }\n}\n\nExtension.$inject = ['$http', '$q', '$timeout', 'localStorageService', '$rootScope', 'ApiConfig'];\napp.service('Liveevent', Extension);\n"],"sourceRoot":"/source/"}