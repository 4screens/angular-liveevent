{"version":3,"sources":["/source/app.ts","/source/liveevent/liveevent.ts","/source/chat/chat.ts","liveevent.js","/source/bootstrap.ts"],"names":["app","angular","module","Liveevent","Liveevent_1","Liveevent.Liveevent","Liveevent.Liveevent.constructor","Liveevent.Liveevent.updatePage","Liveevent.Liveevent.updateQuiz","Liveevent.Liveevent.initSocket","Liveevent.Liveevent.getById","Liveevent.Liveevent.getPageById","indexOf","res","status","console","log","data","this","$q","reject","Liveevent.Liveevent.init","ChatModule","ChatModule.Chat","ChatModule.Chat.constructor","ChatModule.Chat.login","ChatModule.Chat.logout","ChatModule.Chat.updateChat","ChatModule.Chat.sendMsg","ChatModule.Chat.getMsgs","ChatModule.Chat.initSocket","ChatModule.Chat.init","Extension","Extension.constructor","Extension.init","$inject","service"],"mappings":"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","file":"liveevent.min.js","sourcesContent":["/// <reference path=\"../typings/tsd.d.ts\" />\n\nvar app = angular.module('4screens.liveevent', ['LocalStorageModule']);","/// <reference path=\"iliveevent.ts\" />\n\nmodule Liveevent {\n  export class Liveevent implements ILiveevent {\n    enabled: boolean;\n    title: string;\n\n    activePage: Page.IPage;\n    activeQuiz: Engageform.IEngageform;\n    activePageId: string;\n    activeQuizId: string;\n    socket: SocketIOClient.Socket;\n    EF: Engageform.IEngageform;\n    chat: ChatModule.IChat;\n\n    constructor() {\n      console.log('[ Liveevent ] Constructor');\n    }\n\n    private updatePage(page) {\n      console.log('[ Liveevent ] Update Page: ' + page._id);\n      this.activePage = page;\n      this.activePageId = page._id;\n      this.EF['_engageform'].initPage(page); // ts compiler ..\n\n      // Add liveSettings\n      this.EF.current.liveSettings = <Page.ILiveSetting>page.liveSettings;\n    }\n\n    private updateQuiz(EF) {\n      console.log('[ Liveevent ] Update Quiz: ' + EF._engageformId);\n      this.activeQuiz = EF;\n      this.activeQuizId = EF._engageformId;\n    }\n\n    // Sockets\n    private initSocket(opts: API.ILiveEmbed) {\n      console.log('[ Liveevent ] Init socket');\n      var url = Extension.config.backend.domain + Extension.config.liveEvent.socketNamespace;\n      url = url.replace(':liveEventId', opts.id);\n      this.socket = Extension.io.connect(url);\n\n      this.socket.on('connect', () => {\n        console.log('[ Liveevent:Socket ] Connected');\n        this.socket.emit('getStatus', { liveEventId: opts.id });\n      });\n\n      this.socket.on('disconnect', this.initSocket);\n\n      this.socket.on('liveEventStatus', (data) => {\n\n        // Init chat if Liveevent has one\n        // FIXME: Uncomment chatId checking\n        if (!this.chat /*&& data.chatId*/) {\n          // FIXE: Remove fake chat id #55c1f03de5498601002e0c9e and get rid of socketio injection\n          // this.chat = new ChatModule.ChatModule(data.chatId);\n\n          this.chat = new ChatModule.Chat('55c1f03de5498601002e0c9e');\n          this.chat.init();\n        }\n\n        if (data.activeQuestionId !== this.activePageId || data.activeQuizId !== this.activeQuizId) {\n          // Quiz changed\n          if (data.activeQuizId !== this.activeQuizId) {\n            console.log('[ Liveevent:Socket ] Quiz changed');\n            // return Engageform.Engageform.getById(data.activeQuizId).then((quizData) => {\n            //   this.updateQuiz(quizData);\n            // });\n\n            this.EF.init({ id: data.activeQuizId, mode: 'default' }).then((res) => {\n              this.updateQuiz(res);\n              // Update Page\n              this.getPageById(data.activeQuestionId).then((page) => {\n                this.updatePage(page);\n              });\n            });\n          } else {\n            // Only Page changed\n            console.log('[ Liveevent:Socket ] Only Page changed');\n            this.getPageById(data.activeQuestionId).then((page) => {\n              this.updatePage(page);\n            });\n          }\n        }\n      });\n    }\n\n    // Get Liveevent\n    getById(id: string): ng.IPromise<API.ILiveevent> {\n      var url = Extension.config.backend.domain + Extension.config.liveEvent.liveEventUrl;\n      url = url.replace(':liveEventId', id);\n\n      // TODO: Get quiz and current question\n      return Extension.$http.get(url).then((res: API.ILiveeventResponse) => {\n        if ([200, 304].indexOf(res.status) !== -1) {\n          console.log('[ Liveevent ] Get LE: ' + res.data._id);\n          return res.data;\n        }\n\n        return Extension.$q.reject(res);\n      });\n    }\n\n    // Get Page\n    private getPageById(questionId: string) {\n      var url = Extension.config.backend.domain + Extension.config.liveEvent.activeQuestion;\n      url = url.replace(':questionId', questionId);\n\n      return Extension.$http.get(url).then(function(res) {\n\n        if ([200, 304].indexOf(res.status) !== -1) {\n          console.log('[ Liveevent ] Get PAGE: ' + res.data['_id']);\n          return res.data;\n        }\n\n          this.$q.reject(res);\n      });\n    }\n\n    init(opts: API.ILiveEmbed) {\n      console.log('[ Liveevent ] Init: ' + opts.id);\n      var deferred = Extension.$q.defer();\n\n      this.EF = opts.engageform;\n\n      // Init socket\n      this.initSocket(opts);\n\n      deferred.resolve(this);\n      return deferred.promise;\n    }\n  }\n}\n","/// <reference path=\"ichat.ts\" />\n\nmodule ChatModule {\n  export class Chat implements IChat {\n    id: string;\n    name: string;\n    premoderated: boolean;\n    socket: SocketIOClient.Socket;\n    messages: IMessage[] = [];\n    user: IUser;\n\n    constructor(id: string) {\n      console.log('[ Chat ] Constructor');\n      this.id = id;\n\n      return this;\n    }\n\n    private login(data: IFbAuth, dataMe: any) { // FIXME: dateMe FB interface (v2.3 or 2.2) ?\n      this.user = {\n        accessToken: data.accessToken,\n        user: data.userID, // FIXME: What i should pass here (in old version it was userId) ?!\n        userLink: dataMe.link,\n        userName: dataMe.name,\n        userID: data.userID\n      };\n    }\n\n    private logout():void {\n      this.user = null;\n    }\n\n    private updateChat(data) {\n      console.log('[ Chat ] Update chat');\n      this.id = data.id;\n      this.name = data.name;\n      this.premoderated = data.premoderated;\n\n      // Get some old msgs\n      this.getMsgs();\n    }\n\n    private sendMsg(m: IMessage) {\n      console.log('[ Chat ] Posting msg');\n\n      if (!this.user) return;\n\n      var url = Extension.config.backend.domain + Extension.config.chat.sendUrl, msg;\n      url = url.replace(':chatId', this.id);\n\n      msg = {\n        accessToken: this.user.accessToken,\n        date: Date.now(),\n        hidden: false,\n        id: this.user.userId,\n        msg: m,\n        user: this.user.user,\n        userLink: this.user.userLink,\n        userName: this.user.userName\n      };\n\n      Extension.$http.post(url, msg).then((res) => {\n        this.messages.push(msg);\n      });\n    }\n\n    private getMsgs() {\n      console.log('[ Chat ] Get old msgs');\n      var url = Extension.config.backend.domain + Extension.config.chat.messagesUrl;\n      url = url.replace(':chatId', this.id);\n      return Extension.$http.get(url).then((res) => {\n        //console.log('[ Chat ] Got ' + res.data.length + ' msgs');\n        this.messages = <IMessage[]>res.data;\n      });\n    }\n\n    private initSocket() {\n      console.log('[ Chat:Socket ] Init socket');\n\n      var url = Extension.config.backend.socket;\n\n      this.socket = Extension.io.connect(url, { 'force new connection': true });\n\n      this.socket.on('error', (res) => {\n        console.log(res);\n      });\n\n      console.info(url);\n      console.info(this.socket);\n\n      this.socket.on('connect', (data) => {\n        console.log('[ Chat:Socket ] Connected');\n\n        // Join room\n        this.socket.emit('joinRoom', this.id);\n        // We can also leave room, to do so just emit 'leaveRoom' with roomId as param\n      });\n\n      // New msg event\n      this.socket.on('msg', (data) => {\n        console.log('[ Chat:Socket ] New msg');\n      });\n\n      // On disconect\n      this.socket.on('disconnect', this.initSocket);\n    }\n\n    init():void {\n      console.log('[ Chat ] Init: ' + this.id);\n\n      // Get chat details\n      var url = Extension.config.backend.domain + Extension.config.chat.detailUrl;\n      url = url.replace(':chatId', this.id);\n      Extension.$http.get(url).then((res: IChatResponse) => {\n        this.updateChat(res.data);\n        this.initSocket();\n      });\n    }\n  }\n}\n","/// <reference path=\"../typings/tsd.d.ts\" />\nvar app = angular.module('4screens.liveevent', ['LocalStorageModule']);\n\n/// <reference path=\"iliveevent.ts\" />\nvar Liveevent;\n(function (Liveevent_1) {\n    var Liveevent = (function () {\n        function Liveevent() {\n            console.log('[ Liveevent ] Constructor');\n        }\n        Liveevent.prototype.updatePage = function (page) {\n            console.log('[ Liveevent ] Update Page: ' + page._id);\n            this.activePage = page;\n            this.activePageId = page._id;\n            this.EF['_engageform'].initPage(page); // ts compiler ..\n            // Add liveSettings\n            this.EF.current.liveSettings = page.liveSettings;\n        };\n        Liveevent.prototype.updateQuiz = function (EF) {\n            console.log('[ Liveevent ] Update Quiz: ' + EF._engageformId);\n            this.activeQuiz = EF;\n            this.activeQuizId = EF._engageformId;\n        };\n        // Sockets\n        Liveevent.prototype.initSocket = function (opts) {\n            var _this = this;\n            console.log('[ Liveevent ] Init socket');\n            var url = Extension.config.backend.domain + Extension.config.liveEvent.socketNamespace;\n            url = url.replace(':liveEventId', opts.id);\n            this.socket = Extension.io.connect(url);\n            this.socket.on('connect', function () {\n                console.log('[ Liveevent:Socket ] Connected');\n                _this.socket.emit('getStatus', { liveEventId: opts.id });\n            });\n            this.socket.on('disconnect', this.initSocket);\n            this.socket.on('liveEventStatus', function (data) {\n                // Init chat if Liveevent has one\n                // FIXME: Uncomment chatId checking\n                if (!_this.chat /*&& data.chatId*/) {\n                    // FIXE: Remove fake chat id #55c1f03de5498601002e0c9e and get rid of socketio injection\n                    // this.chat = new ChatModule.ChatModule(data.chatId);\n                    _this.chat = new ChatModule.Chat('55c1f03de5498601002e0c9e');\n                    _this.chat.init();\n                }\n                if (data.activeQuestionId !== _this.activePageId || data.activeQuizId !== _this.activeQuizId) {\n                    // Quiz changed\n                    if (data.activeQuizId !== _this.activeQuizId) {\n                        console.log('[ Liveevent:Socket ] Quiz changed');\n                        // return Engageform.Engageform.getById(data.activeQuizId).then((quizData) => {\n                        //   this.updateQuiz(quizData);\n                        // });\n                        _this.EF.init({ id: data.activeQuizId, mode: 'default' }).then(function (res) {\n                            _this.updateQuiz(res);\n                            // Update Page\n                            _this.getPageById(data.activeQuestionId).then(function (page) {\n                                _this.updatePage(page);\n                            });\n                        });\n                    }\n                    else {\n                        // Only Page changed\n                        console.log('[ Liveevent:Socket ] Only Page changed');\n                        _this.getPageById(data.activeQuestionId).then(function (page) {\n                            _this.updatePage(page);\n                        });\n                    }\n                }\n            });\n        };\n        // Get Liveevent\n        Liveevent.prototype.getById = function (id) {\n            var url = Extension.config.backend.domain + Extension.config.liveEvent.liveEventUrl;\n            url = url.replace(':liveEventId', id);\n            // TODO: Get quiz and current question\n            return Extension.$http.get(url).then(function (res) {\n                if ([200, 304].indexOf(res.status) !== -1) {\n                    console.log('[ Liveevent ] Get LE: ' + res.data._id);\n                    return res.data;\n                }\n                return Extension.$q.reject(res);\n            });\n        };\n        // Get Page\n        Liveevent.prototype.getPageById = function (questionId) {\n            var url = Extension.config.backend.domain + Extension.config.liveEvent.activeQuestion;\n            url = url.replace(':questionId', questionId);\n            return Extension.$http.get(url).then(function (res) {\n                if ([200, 304].indexOf(res.status) !== -1) {\n                    console.log('[ Liveevent ] Get PAGE: ' + res.data['_id']);\n                    return res.data;\n                }\n                this.$q.reject(res);\n            });\n        };\n        Liveevent.prototype.init = function (opts) {\n            console.log('[ Liveevent ] Init: ' + opts.id);\n            var deferred = Extension.$q.defer();\n            this.EF = opts.engageform;\n            // Init socket\n            this.initSocket(opts);\n            deferred.resolve(this);\n            return deferred.promise;\n        };\n        return Liveevent;\n    })();\n    Liveevent_1.Liveevent = Liveevent;\n})(Liveevent || (Liveevent = {}));\n\n/// <reference path=\"ichat.ts\" />\nvar ChatModule;\n(function (ChatModule) {\n    var Chat = (function () {\n        function Chat(id) {\n            this.messages = [];\n            console.log('[ Chat ] Constructor');\n            this.id = id;\n            return this;\n        }\n        Chat.prototype.login = function (data, dataMe) {\n            this.user = {\n                accessToken: data.accessToken,\n                user: data.userID,\n                userLink: dataMe.link,\n                userName: dataMe.name,\n                userID: data.userID\n            };\n        };\n        Chat.prototype.logout = function () {\n            this.user = null;\n        };\n        Chat.prototype.updateChat = function (data) {\n            console.log('[ Chat ] Update chat');\n            this.id = data.id;\n            this.name = data.name;\n            this.premoderated = data.premoderated;\n            // Get some old msgs\n            this.getMsgs();\n        };\n        Chat.prototype.sendMsg = function (m) {\n            var _this = this;\n            console.log('[ Chat ] Posting msg');\n            if (!this.user)\n                return;\n            var url = Extension.config.backend.domain + Extension.config.chat.sendUrl, msg;\n            url = url.replace(':chatId', this.id);\n            msg = {\n                accessToken: this.user.accessToken,\n                date: Date.now(),\n                hidden: false,\n                id: this.user.userId,\n                msg: m,\n                user: this.user.user,\n                userLink: this.user.userLink,\n                userName: this.user.userName\n            };\n            Extension.$http.post(url, msg).then(function (res) {\n                _this.messages.push(msg);\n            });\n        };\n        Chat.prototype.getMsgs = function () {\n            var _this = this;\n            console.log('[ Chat ] Get old msgs');\n            var url = Extension.config.backend.domain + Extension.config.chat.messagesUrl;\n            url = url.replace(':chatId', this.id);\n            return Extension.$http.get(url).then(function (res) {\n                //console.log('[ Chat ] Got ' + res.data.length + ' msgs');\n                _this.messages = res.data;\n            });\n        };\n        Chat.prototype.initSocket = function () {\n            var _this = this;\n            console.log('[ Chat:Socket ] Init socket');\n            var url = Extension.config.backend.socket;\n            this.socket = Extension.io.connect(url, { 'force new connection': true });\n            this.socket.on('error', function (res) {\n                console.log(res);\n            });\n            console.info(url);\n            console.info(this.socket);\n            this.socket.on('connect', function (data) {\n                console.log('[ Chat:Socket ] Connected');\n                // Join room\n                _this.socket.emit('joinRoom', _this.id);\n                // We can also leave room, to do so just emit 'leaveRoom' with roomId as param\n            });\n            // New msg event\n            this.socket.on('msg', function (data) {\n                console.log('[ Chat:Socket ] New msg');\n            });\n            // On disconect\n            this.socket.on('disconnect', this.initSocket);\n        };\n        Chat.prototype.init = function () {\n            var _this = this;\n            console.log('[ Chat ] Init: ' + this.id);\n            // Get chat details\n            var url = Extension.config.backend.domain + Extension.config.chat.detailUrl;\n            url = url.replace(':chatId', this.id);\n            Extension.$http.get(url).then(function (res) {\n                _this.updateChat(res.data);\n                _this.initSocket();\n            });\n        };\n        return Chat;\n    })();\n    ChatModule.Chat = Chat;\n})(ChatModule || (ChatModule = {}));\n\n/// <reference path=\"api/api.ts\" />\n/// <reference path=\"liveevent/liveevent.ts\" />\n/// <reference path=\"chat/chat.ts\" />\nvar Extension = (function () {\n    function Extension($http, $q, localStorage, ApiConfig) {\n        Extension.$http = $http;\n        Extension.$q = $q;\n        Extension.localStorage = localStorage;\n        Extension.config = ApiConfig;\n    }\n    Extension.prototype.init = function (opts) {\n        Extension.io = opts.io;\n        var liveevent = new Liveevent.Liveevent;\n        return liveevent.init(opts);\n    };\n    return Extension;\n})();\nExtension.$inject = ['$http', '$q', 'localStorageService', 'ApiConfig'];\napp.service('Liveevent', Extension);\n\n/// <reference path=\"api/iembed.ts\" />\n/// <reference path=\"api/iquizquestion.ts\" />\n/// <reference path=\"api/iquizquestionsres.ts\" />\n/// <reference path=\"api/iquizquestionanswer.ts\" />\n/// <reference path=\"api/iquizquestionanswerres.ts\" />\n/// <reference path=\"api/iquiz.ts\" />\n/// <reference path=\"api/iquizres.ts\" />\n/// <reference path=\"api/iquizfinish.ts\" />\n/// <reference path=\"api/iquizfinishres.ts\" />\n/// <reference path=\"page/enum.ts\" />\n/// <reference path=\"page/icase.ts\" />\n/// <reference path=\"page/ipage.ts\" />\n/// <reference path=\"page/ipages.ts\" />\n/// <reference path=\"page/ipagesent.ts\" />\n/// <reference path=\"page/isettings.ts\" />\n/// <reference path=\"engageform/enum.ts\" />\n/// <reference path=\"engageform/iengageform.ts\" />\n/// <reference path=\"engageform/isettings.ts\" />\n/// <reference path=\"engageform/itheme.ts\" />\n/// <reference path=\"branding/ibranding.ts\" />\n/// <reference path=\"navigation/inavigation.ts\" /> \n\n//# sourceMappingURL=liveevent.js.map","/// <reference path=\"api/api.ts\" />\n/// <reference path=\"liveevent/liveevent.ts\" />\n/// <reference path=\"chat/chat.ts\" />\n\nclass Extension {\n  static $http: ng.IHttpService;\n  static $q: ng.IQService;\n  static localStorage: ng.local.storage.ILocalStorageService;\n  static config;\n  static io: SocketIOClientStatic;\n  Liveevent: Liveevent.ILiveevent;\n\n  constructor($http: ng.IHttpService, $q: ng.IQService, localStorage: ng.local.storage.ILocalStorageService, ApiConfig) {\n    Extension.$http = $http;\n    Extension.$q = $q;\n    Extension.localStorage = localStorage;\n    Extension.config = ApiConfig;\n  }\n\n  init(opts: API.ILiveEmbed) {\n    Extension.io = <SocketIOClientStatic>opts.io;\n\n    var liveevent = new Liveevent.Liveevent;\n    return liveevent.init(opts);\n  }\n}\n\nExtension.$inject = ['$http', '$q', 'localStorageService', 'ApiConfig'];\napp.service('Liveevent', Extension);\n"],"sourceRoot":"/source/"}