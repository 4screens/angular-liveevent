{"version":3,"sources":["/source/header.ts","liveevent.js","/source/liveevent/liveevent.ts","/source/chat/chat.ts","/source/bootstrap.ts"],"names":["angular","Liveevent","app","module","Liveevent.Liveevent","Liveevent.Liveevent.constructor","Liveevent.Liveevent.updatePage","Liveevent.Liveevent.removePage","Extension","Liveevent.Liveevent.updateQuiz","Liveevent.Liveevent.removeQuiz","Liveevent.Liveevent.initChat","Liveevent.Liveevent.initSocket","this","_this","Liveevent.Liveevent.getById","Liveevent.Liveevent.getPageById","$http","get","url","then","res","indexOf","status","console","log","data","Liveevent.Liveevent.init","Liveevent_1","ChatModule","ChatModule.Chat","ChatModule.Chat.constructor","Chat","ChatModule.Chat.login","ChatModule.Chat.logout","ChatModule.Chat.updateChat","ChatModule.Chat.sendMsg","msg","ChatModule.Chat.getMsgs","ChatModule.Chat.initSocket","ChatModule.Chat.init","Extension.constructor","Extension.init","$inject","service"],"mappings":"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","file":"liveevent.min.js","sourcesContent":["/*!\n * 4screens-angular-liveevent v0.1.15\n * (c) 2015 Nopattern sp. z o.o.\n * License: proprietary\n */\n","(function(angular) {\n/*!\n * 4screens-angular-liveevent v0.1.15\n * (c) 2015 Nopattern sp. z o.o.\n * License: proprietary\n */\n\n/// <reference path=\"../typings/tsd.d.ts\" />\nvar app = angular.module('4screens.liveevent', ['LocalStorageModule']);\n\n/// <reference path=\"iliveevent.ts\" />\nvar Liveevent;\n(function (Liveevent_1) {\n    var Liveevent = (function () {\n        function Liveevent() {\n            console.log('[ Liveevent ] Constructor');\n        }\n        Liveevent.prototype.updatePage = function (page) {\n            console.log('[ Liveevent ] Update Page: ' + page._id);\n            var __type = this.activePage ? (this.activePage.type + '') : null;\n            // Check if form and if so, send all inputs\n            if (__type && __type.indexOf('form') > -1) {\n                this.EF['_engageform'].navigation.pick(null, null, { quiet: true });\n            }\n            this.activePage = page;\n            this.activePageId = page._id;\n            this.EF['_engageform'].initPage(page); // ts compiler ..\n            // Add liveSettings\n            this.EF.current.liveSettings = page.liveSettings;\n            // Overwrite navigation\n            this.EF['_engageform'].navigation.enabled = false;\n            this.EF['_engageform'].navigation.position = 0;\n            this.EF['_engageform'].navigation.size = 1;\n            this.EF['_engageform'].navigation.hasStart = false;\n            this.EF['_engageform'].navigation.enabledStart = false;\n            this.EF['_engageform'].navigation.hasPrev = false;\n            this.EF['_engageform'].navigation.enabledPrev = false;\n            this.EF['_engageform'].navigation.hasNext = false;\n            this.EF['_engageform'].navigation.enabledNext = false;\n            this.EF['_engageform'].navigation.hasFinish = false;\n            this.EF['_engageform'].navigation.enabledFinish = false;\n            this.EF['_engageform'].navigation.distance = 0;\n            this.EF['_engageform'].navigation.prev = function ($event) { return; };\n            this.EF['_engageform'].navigation.next = function ($event, vcase) { return; };\n            this.EF['_engageform'].navigation.start = function ($event) { return; };\n            this.EF['_engageform'].navigation.finish = function ($event, vcase) { return; };\n        };\n        Liveevent.prototype.removePage = function () {\n            var _this = this;\n            console.log('[ Liveevent ] Remove page');\n            Extension.$timeout(function () {\n                _this.activePage = null;\n                _this.activePageId = null;\n                if (_this.EF['_engageform']) {\n                    _this.EF['_engageform'].current = null;\n                    _this.EF['_engageform'].message = null;\n                }\n            });\n        };\n        Liveevent.prototype.updateQuiz = function (EF) {\n            console.log('[ Liveevent ] Update Quiz: ' + EF._engageformId);\n            this.activeQuiz = EF;\n            this.activeQuizId = EF._engageformId;\n        };\n        Liveevent.prototype.removeQuiz = function () {\n            var _this = this;\n            console.log('[ Liveevent ] Remove quiz');\n            Extension.$timeout(function () {\n                _this.activeQuiz = null;\n                _this.activeQuizId = null;\n                if (_this.EF['_engageform']) {\n                    _this.EF['_engageform'].branding = null;\n                    _this.EF['_engageform'].current = null;\n                    _this.EF['_engageform'].message = null;\n                    _this.EF['_engageform'].meta = null;\n                    _this.EF['_engageform'].navigation = null;\n                    _this.EF['_engageform'].theme = null;\n                    _this.EF['_engageform'].title = null;\n                    _this.EF['_engageform'].type = null;\n                }\n            });\n        };\n        // Init chat\n        Liveevent.prototype.initChat = function (id) {\n            var deferred = Extension.$q.defer();\n            if (!this.chat) {\n                this.chat = new ChatModule.Chat(id);\n                return this.chat.init();\n            }\n            else {\n                // If it is already initialised (meaning it's available on this instance), return a fake promise that\n                // is here just to make the API looks better.\n                deferred.resolve();\n                return deferred.promise;\n            }\n        };\n        // Sockets\n        Liveevent.prototype.initSocket = function (opts) {\n            var _this = this;\n            console.log('[ Liveevent ] Init socket');\n            var url = Extension.config.backend.socket + Extension.config.liveEvent.socketNamespace;\n            url = url.replace(':liveEventId', opts.id);\n            this.socket = Extension.io.connect(url, { 'force new connection': true });\n            this.socket.on('connect', function () {\n                console.log('[ Liveevent:Socket ] Connected');\n                _this.socket.emit('getStatus', { liveEventId: opts.id });\n            });\n            this.socket.on('disconnect', this.initSocket);\n            this.socket.on('error', function (res) {\n                console.warn(res);\n            });\n            this.socket.on('liveEventStatus', function (data) {\n                // Liveevent is off\n                if (!data.isActive) {\n                    console.log('[ Liveevent:Socket ] Liveevent is not active');\n                    _this.removePage();\n                    _this.removeQuiz();\n                    return;\n                }\n                if (data.activeQuestionId !== _this.activePageId || data.activeQuizId !== _this.activeQuizId) {\n                    // Quiz is off\n                    if (!data.activeQuizId) {\n                        console.log('[ Liveevent ] Quiz is empty');\n                        _this.removeQuiz();\n                        return;\n                    }\n                    // Page is off\n                    if (!data.activeQuestionId) {\n                        console.log('[ Liveevent ] Page is empty');\n                        _this.removePage();\n                        return;\n                    }\n                    // Quiz changed\n                    if (data.activeQuizId !== _this.activeQuizId) {\n                        console.log('[ Liveevent:Socket ] Quiz changed');\n                        _this.EF.init({ id: data.activeQuizId, mode: 'default' }).then(function (res) {\n                            _this.updateQuiz(res);\n                            // Update Page\n                            _this.getPageById(data.activeQuestionId).then(function (page) {\n                                _this.updatePage(page);\n                            });\n                        });\n                    }\n                    else {\n                        // Only Page changed\n                        console.log('[ Liveevent:Socket ] Only Page changed');\n                        _this.getPageById(data.activeQuestionId).then(function (page) {\n                            _this.updatePage(page);\n                        });\n                    }\n                }\n                // Quiz and page is same, check if showAnswers had change\n                if (_this.EF.current && data.showAnswers !== _this.EF.current.liveSettings.showAnswers) {\n                    console.log('[ Liveevent ] Show answer option changed');\n                    Extension.$timeout(function () {\n                        _this.EF.current.liveSettings.showAnswers = !_this.EF.current.liveSettings.showAnswers;\n                    });\n                }\n            });\n            this.socket.on('multipleChoiceQuestionAnswers', function (data) {\n                _this.EF.current.updateAnswers(data);\n            });\n        };\n        // Get Liveevent\n        Liveevent.prototype.getById = function (id) {\n            var url = Extension.config.backend.domain + Extension.config.liveEvent.liveEventUrl;\n            url = url.replace(':liveEventId', id);\n            // TODO: Get quiz and current question\n            return Extension.$http.get(url).then(function (res) {\n                if ([200, 304].indexOf(res.status) !== -1) {\n                    return res.data;\n                }\n                return Extension.$q.reject(res);\n            });\n        };\n        // Get Page\n        Liveevent.prototype.getPageById = function (questionId) {\n            var url = Extension.config.backend.domain + Extension.config.liveEvent.activeQuestion;\n            url = url.replace(':questionId', questionId);\n            return Extension.$http.get(url).then(function (res) {\n                if ([200, 304].indexOf(res.status) !== -1) {\n                    console.log('[ Liveevent ] Get PAGE: ' + res.data['_id']);\n                    return res.data;\n                }\n                this.$q.reject(res);\n            });\n        };\n        Liveevent.prototype.init = function (opts) {\n            var _this = this;\n            console.log('[ Liveevent ] Init: ' + opts.id);\n            var deferred = Extension.$q.defer();\n            this.EF = opts.engageform;\n            // Get Liveevent\n            this.getById(opts.id).then(function (res) {\n                // Init socket\n                _this.initSocket(opts);\n                // Init chat\n                _this.initChat(res.chatId).then(function () {\n                    // ...\n                });\n                deferred.resolve(_this);\n            });\n            return deferred.promise;\n        };\n        return Liveevent;\n    })();\n    Liveevent_1.Liveevent = Liveevent;\n})(Liveevent || (Liveevent = {}));\n\n/// <reference path=\"ichat.ts\" />\nvar ChatModule;\n(function (ChatModule) {\n    var Chat = (function () {\n        function Chat(id) {\n            this.messages = [];\n            console.log('[ Chat ] Constructor');\n            this.id = id;\n            return this;\n        }\n        Chat.prototype.login = function (data, dataMe) {\n            this.user = {\n                accessToken: data.accessToken,\n                user: data.userID,\n                userLink: dataMe.link,\n                userName: dataMe.name,\n                userID: data.userID\n            };\n        };\n        Chat.prototype.logout = function () {\n            this.user = null;\n        };\n        Chat.prototype.updateChat = function (data) {\n            console.log('[ Chat ] Update chat');\n            this.id = data.id;\n            this.name = data.name;\n            this.premoderated = data.premoderated;\n            this.direction = data.chatDirection;\n            this.theme = data.theme;\n            // Get some old msgs\n            this.getMsgs();\n        };\n        Chat.prototype.sendMsg = function (m) {\n            console.log('[ Chat ] Posting msg');\n            if (!this.user)\n                return;\n            var url = Extension.config.backend.domain + Extension.config.chat.sendUrl, msg;\n            url = url.replace(':chatId', this.id);\n            msg = {\n                accessToken: this.user.accessToken,\n                date: Date.now(),\n                hidden: false,\n                id: this.user.userId,\n                msg: m,\n                user: this.user.user,\n                userLink: this.user.userLink,\n                userName: this.user.userName\n            };\n            return Extension.$http.post(url, msg);\n        };\n        Chat.prototype.getMsgs = function () {\n            var _this = this;\n            console.log('[ Chat ] Get old msgs');\n            var url = Extension.config.backend.domain + Extension.config.chat.messagesUrl;\n            url = url.replace(':chatId', this.id);\n            return Extension.$http.get(url).then(function (res) {\n                //console.log('[ Chat ] Got ' + res.data.length + ' msgs');\n                _this.messages = res.data;\n                if (_this.messages.length) {\n                    // Sort by newest\n                    _this.messages = _.sortBy(_this.messages, 'date').reverse();\n                    // Reverse msg order\n                    if (_this.direction && _this.direction === 'ttb') {\n                        _this.messages.reverse();\n                    }\n                }\n            });\n        };\n        Chat.prototype.initSocket = function () {\n            var _this = this;\n            console.log('[ Chat:Socket ] Init socket');\n            var url = Extension.config.backend.socket;\n            this.socket = Extension.io.connect(url, { 'force new connection': true });\n            this.socket.on('error', function (res) {\n                console.warn(res);\n            });\n            this.socket.on('connect', function (data) {\n                console.log('[ Chat:Socket ] Connected');\n                // Join room\n                _this.socket.emit('joinRoom', _this.id);\n                // We can also leave room, to do so just emit 'leaveRoom' with roomId as param\n            });\n            // New msg event\n            this.socket.on('msg', function (data) {\n                console.log('[ Chat:Socket ] New msg');\n                Extension.$rootScope.$apply(function () {\n                    if (_this.direction && _this.direction === 'ttb') {\n                        _this.messages.push(data);\n                    }\n                    else {\n                        _this.messages.unshift(data);\n                    }\n                });\n            });\n            this.socket.on('msgHide', function (id) {\n                console.log('[ Chat:Socket] Hide msg');\n                var messageIndex = _this.messages.length;\n                for (var i = 0; i < _this.messages.length; i += 1) {\n                    if (_this.messages[i].id === id) {\n                        messageIndex = i;\n                    }\n                }\n                Extension.$rootScope.$apply(function () {\n                    _this.messages.splice(messageIndex, 1);\n                });\n            });\n            // On disconect\n            this.socket.on('disconnect', this.initSocket);\n        };\n        Chat.prototype.init = function () {\n            var _this = this;\n            console.log('[ Chat ] Init: ' + this.id);\n            // Get chat details\n            var url = Extension.config.backend.domain + Extension.config.chat.detailUrl;\n            url = url.replace(':chatId', this.id);\n            return Extension.$http.get(url).then(function (res) {\n                _this.updateChat(res.data);\n                _this.initSocket();\n                return res;\n            });\n        };\n        return Chat;\n    })();\n    ChatModule.Chat = Chat;\n})(ChatModule || (ChatModule = {}));\n\n/// <reference path=\"api/api.ts\" />\n/// <reference path=\"liveevent/liveevent.ts\" />\n/// <reference path=\"chat/chat.ts\" />\nvar Extension = (function () {\n    function Extension($http, $q, $timeout, localStorage, $rootScope, ApiConfig) {\n        Extension.$http = $http;\n        Extension.$timeout = $timeout;\n        Extension.$q = $q;\n        Extension.localStorage = localStorage;\n        Extension.config = ApiConfig;\n        Extension.$rootScope = $rootScope;\n    }\n    Extension.prototype.init = function (opts) {\n        if (Extension._instances[opts.id]) {\n            return Extension._instances[opts.id];\n        }\n        Extension.io = opts.io;\n        var liveEvent = new Liveevent.Liveevent();\n        return Extension._instances[opts.id] = liveEvent.init(opts);\n    };\n    Extension._instances = {};\n    return Extension;\n})();\nExtension.$inject = ['$http', '$q', '$timeout', 'localStorageService', '$rootScope', 'ApiConfig'];\napp.service('Liveevent', Extension);\n\n/// <reference path=\"api/iembed.ts\" />\n/// <reference path=\"api/iquizquestion.ts\" />\n/// <reference path=\"api/iquizquestionsres.ts\" />\n/// <reference path=\"api/iquizquestionanswer.ts\" />\n/// <reference path=\"api/iquizquestionanswerres.ts\" />\n/// <reference path=\"api/iquiz.ts\" />\n/// <reference path=\"api/iquizres.ts\" />\n/// <reference path=\"api/iquizfinish.ts\" />\n/// <reference path=\"api/iquizfinishres.ts\" />\n/// <reference path=\"page/enum.ts\" />\n/// <reference path=\"page/icase.ts\" />\n/// <reference path=\"page/ipage.ts\" />\n/// <reference path=\"page/ipages.ts\" />\n/// <reference path=\"page/ipagesent.ts\" />\n/// <reference path=\"page/isettings.ts\" />\n/// <reference path=\"engageform/enum.ts\" />\n/// <reference path=\"engageform/iengageform.ts\" />\n/// <reference path=\"engageform/isettings.ts\" />\n/// <reference path=\"engageform/itheme.ts\" />\n/// <reference path=\"branding/ibranding.ts\" />\n/// <reference path=\"navigation/inavigation.ts\" /> \n})(angular);\n//# sourceMappingURL=liveevent.js.map","/// <reference path=\"iliveevent.ts\" />\n\nmodule Liveevent {\n  export class Liveevent implements ILiveevent {\n    enabled: boolean;\n    title: string;\n\n    activePage: Page.IPage;\n    activeQuiz: Engageform.IEngageform;\n    activePageId: string;\n    activeQuizId: string;\n    socket: SocketIOClient.Socket;\n    EF: Engageform.IEngageform;\n    chat: ChatModule.IChat;\n\n    constructor() {\n      console.log('[ Liveevent ] Constructor');\n    }\n\n    private updatePage(page) {\n      console.log('[ Liveevent ] Update Page: ' + page._id);\n\n      var __type = this.activePage ? (this.activePage.type + '') : null;\n\n      // Check if form and if so, send all inputs\n      if (__type && __type.indexOf('form') > -1) {\n        this.EF['_engageform'].navigation.pick(null, null, {quiet: true});\n      }\n\n      this.activePage = page;\n      this.activePageId = page._id;\n      this.EF['_engageform'].initPage(page); // ts compiler ..\n\n      // Add liveSettings\n      this.EF.current.liveSettings = <Page.ILiveSetting>page.liveSettings;\n\n      // Overwrite navigation\n      this.EF['_engageform'].navigation.enabled = false;\n      this.EF['_engageform'].navigation.position = 0;\n      this.EF['_engageform'].navigation.size = 1;\n      this.EF['_engageform'].navigation.hasStart = false;\n      this.EF['_engageform'].navigation.enabledStart = false;\n      this.EF['_engageform'].navigation.hasPrev = false;\n      this.EF['_engageform'].navigation.enabledPrev = false;\n      this.EF['_engageform'].navigation.hasNext = false;\n      this.EF['_engageform'].navigation.enabledNext = false;\n      this.EF['_engageform'].navigation.hasFinish = false;\n      this.EF['_engageform'].navigation.enabledFinish = false;\n      this.EF['_engageform'].navigation.distance = 0;\n      this.EF['_engageform'].navigation.prev = ($event) => { return; };\n      this.EF['_engageform'].navigation.next = ($event, vcase: Page.ICase) => { return; };\n      this.EF['_engageform'].navigation.start = ($event) => { return; };\n      this.EF['_engageform'].navigation.finish = ($event, vcase: Page.ICase) => { return; };\n    }\n\n    private removePage() {\n      console.log('[ Liveevent ] Remove page');\n      Extension.$timeout(() => {\n        this.activePage = null;\n        this.activePageId = null;\n\n        if (this.EF['_engageform']) {\n          this.EF['_engageform'].current = null;\n          this.EF['_engageform'].message = null;\n        }\n      });\n    }\n\n    private updateQuiz(EF) {\n      console.log('[ Liveevent ] Update Quiz: ' + EF._engageformId);\n\n      this.activeQuiz = EF;\n      this.activeQuizId = EF._engageformId;\n    }\n\n    private removeQuiz() {\n      console.log('[ Liveevent ] Remove quiz');\n      Extension.$timeout(() => {\n        this.activeQuiz = null;\n        this.activeQuizId = null;\n\n        if (this.EF['_engageform']) {\n          this.EF['_engageform'].branding = null;\n          this.EF['_engageform'].current = null;\n          this.EF['_engageform'].message = null;\n          this.EF['_engageform'].meta = null;\n          this.EF['_engageform'].navigation = null;\n          this.EF['_engageform'].theme = null;\n          this.EF['_engageform'].title = null;\n          this.EF['_engageform'].type = null;\n        }\n      });\n    }\n\n    // Init chat\n    private initChat(id: string): ng.IPromise<any> {\n      var deferred = Extension.$q.defer();\n\n      if (!this.chat) {\n        this.chat = new ChatModule.Chat(id);\n\n        return this.chat.init();\n      } else {\n        // If it is already initialised (meaning it's available on this instance), return a fake promise that\n        // is here just to make the API looks better.\n        deferred.resolve();\n        return deferred.promise;\n      }\n    }\n\n    // Sockets\n    private initSocket(opts: API.ILiveEmbed) {\n      console.log('[ Liveevent ] Init socket');\n      var url = Extension.config.backend.socket + Extension.config.liveEvent.socketNamespace;\n      url = url.replace(':liveEventId', opts.id);\n      this.socket = Extension.io.connect(url, { 'force new connection': true });\n\n      this.socket.on('connect', () => {\n        console.log('[ Liveevent:Socket ] Connected');\n        this.socket.emit('getStatus', { liveEventId: opts.id });\n      });\n\n      this.socket.on('disconnect', this.initSocket);\n\n      this.socket.on('error', (res) => {\n        console.warn(res);\n      });\n\n      this.socket.on('liveEventStatus', (data) => {\n\n        // Liveevent is off\n        if (!data.isActive) {\n          console.log('[ Liveevent:Socket ] Liveevent is not active');\n          this.removePage();\n          this.removeQuiz();\n\n          return;\n        }\n\n        if (data.activeQuestionId !== this.activePageId || data.activeQuizId !== this.activeQuizId) {\n\n          // Quiz is off\n          if (!data.activeQuizId) {\n            console.log('[ Liveevent ] Quiz is empty');\n            this.removeQuiz();\n\n            return;\n          }\n\n          // Page is off\n          if (!data.activeQuestionId) {\n            console.log('[ Liveevent ] Page is empty');\n            this.removePage();\n\n            return;\n          }\n\n\n          // Quiz changed\n          if (data.activeQuizId !== this.activeQuizId) {\n            console.log('[ Liveevent:Socket ] Quiz changed');\n            this.EF.init({ id: data.activeQuizId, mode: 'default' }).then((res) => {\n              this.updateQuiz(res);\n\n              // Update Page\n              this.getPageById(data.activeQuestionId).then((page) => {\n                this.updatePage(page);\n              });\n            });\n          } else {\n            // Only Page changed\n            console.log('[ Liveevent:Socket ] Only Page changed');\n            this.getPageById(data.activeQuestionId).then((page) => {\n              this.updatePage(page);\n            });\n          }\n        }\n\n        // Quiz and page is same, check if showAnswers had change\n        if (this.EF.current && data.showAnswers !== this.EF.current.liveSettings.showAnswers) {\n          console.log('[ Liveevent ] Show answer option changed');\n\n          Extension.$timeout(() => {\n            this.EF.current.liveSettings.showAnswers = !this.EF.current.liveSettings.showAnswers;\n          });\n        }\n      });\n\n      this.socket.on('multipleChoiceQuestionAnswers', (data) => {\n        this.EF.current.updateAnswers(data);\n      });\n    }\n\n    // Get Liveevent\n    getById(id: string): ng.IPromise<ILiveeventResponse> {\n      var url = Extension.config.backend.domain + Extension.config.liveEvent.liveEventUrl;\n      url = url.replace(':liveEventId', id);\n\n      // TODO: Get quiz and current question\n      return Extension.$http.get(url).then((res) => {\n        if ([200, 304].indexOf(res.status) !== -1) {\n          return res.data;\n        }\n\n        return Extension.$q.reject(res);\n      });\n    }\n\n    // Get Page\n    private getPageById(questionId: string) {\n      var url = Extension.config.backend.domain + Extension.config.liveEvent.activeQuestion;\n      url = url.replace(':questionId', questionId);\n\n      return Extension.$http.get(url).then(function(res) {\n\n        if ([200, 304].indexOf(res.status) !== -1) {\n          console.log('[ Liveevent ] Get PAGE: ' + res.data['_id']);\n          return res.data;\n        }\n\n          this.$q.reject(res);\n      });\n    }\n\n    init(opts: API.ILiveEmbed) {\n      console.log('[ Liveevent ] Init: ' + opts.id);\n      var deferred = Extension.$q.defer();\n\n      this.EF = opts.engageform;\n\n      // Get Liveevent\n      this.getById(opts.id).then((res) => {\n\n        // Init socket\n        this.initSocket(opts);\n\n        // Init chat\n        this.initChat(res.chatId).then(() => {\n          // ...\n        });\n        deferred.resolve(this);\n      });\n\n      return deferred.promise;\n    }\n  }\n}\n","/// <reference path=\"ichat.ts\" />\n\nmodule ChatModule {\n  export class Chat implements IChat {\n    id: string;\n    name: string;\n    premoderated: boolean;\n    direction: string;\n    theme: ITheme;\n    socket: SocketIOClient.Socket;\n    messages: IMessage[] = [];\n    user: IUser;\n\n    constructor(id: string) {\n      console.log('[ Chat ] Constructor');\n      this.id = id;\n\n      return this;\n    }\n\n    private login(data: IFbAuth, dataMe: any) { // FIXME: dateMe FB interface (v2.3 or 2.2) ?\n      this.user = {\n        accessToken: data.accessToken,\n        user: data.userID,\n        userLink: dataMe.link,\n        userName: dataMe.name,\n        userID: data.userID\n      };\n    }\n\n    private logout():void {\n      this.user = null;\n    }\n\n    private updateChat(data) {\n      console.log('[ Chat ] Update chat');\n      this.id = data.id;\n      this.name = data.name;\n      this.premoderated = data.premoderated;\n      this.direction = data.chatDirection;\n      this.theme = data.theme;\n\n      // Get some old msgs\n      this.getMsgs();\n    }\n\n    private sendMsg(m: IMessage) {\n      console.log('[ Chat ] Posting msg');\n\n      if (!this.user) return;\n\n      var url = Extension.config.backend.domain + Extension.config.chat.sendUrl, msg;\n      url = url.replace(':chatId', this.id);\n\n      msg = {\n        accessToken: this.user.accessToken,\n        date: Date.now(),\n        hidden: false,\n        id: this.user.userId,\n        msg: m,\n        user: this.user.user,\n        userLink: this.user.userLink,\n        userName: this.user.userName\n      };\n\n      return Extension.$http.post(url, msg);\n    }\n\n    private getMsgs() {\n      console.log('[ Chat ] Get old msgs');\n      var url = Extension.config.backend.domain + Extension.config.chat.messagesUrl;\n      url = url.replace(':chatId', this.id);\n      return Extension.$http.get(url).then((res) => {\n        //console.log('[ Chat ] Got ' + res.data.length + ' msgs');\n        this.messages = <IMessage[]>res.data;\n\n        if (this.messages.length) {\n          // Sort by newest\n          this.messages = _.sortBy(this.messages, 'date').reverse();\n\n          // Reverse msg order\n          if (this.direction && this.direction === 'ttb') {\n            this.messages.reverse();\n          }\n        }\n\n      });\n    }\n\n    private initSocket() {\n      console.log('[ Chat:Socket ] Init socket');\n\n      var url = Extension.config.backend.socket;\n\n      this.socket = Extension.io.connect(url, { 'force new connection': true });\n\n      this.socket.on('error', (res) => {\n        console.warn(res);\n      });\n\n      this.socket.on('connect', (data) => {\n        console.log('[ Chat:Socket ] Connected');\n\n        // Join room\n        this.socket.emit('joinRoom', this.id);\n        // We can also leave room, to do so just emit 'leaveRoom' with roomId as param\n      });\n\n      // New msg event\n      this.socket.on('msg', (data) => {\n        console.log('[ Chat:Socket ] New msg');\n        Extension.$rootScope.$apply(() => {\n\n          if (this.direction && this.direction === 'ttb') {\n            this.messages.push(<IMessage>data);\n          } else {\n            this.messages.unshift(<IMessage>data);\n          }\n\n        })\n      });\n\n      this.socket.on('msgHide', (id) => {\n        console.log('[ Chat:Socket] Hide msg');\n\n        var messageIndex = this.messages.length;\n\n        for (var i = 0; i < this.messages.length; i += 1) {\n          if (this.messages[i].id === id) {\n            messageIndex = i;\n          }\n        }\n\n        Extension.$rootScope.$apply(() => {\n          this.messages.splice(messageIndex, 1);\n        });\n      });\n\n      // On disconect\n      this.socket.on('disconnect', this.initSocket);\n    }\n\n    init():ng.IPromise<IChatResponse> {\n      console.log('[ Chat ] Init: ' + this.id);\n\n      // Get chat details\n      var url = Extension.config.backend.domain + Extension.config.chat.detailUrl;\n      url = url.replace(':chatId', this.id);\n      return Extension.$http.get(url).then((res: IChatResponse) => {\n        this.updateChat(res.data);\n        this.initSocket();\n        return res;\n      });\n    }\n  }\n}\n","/// <reference path=\"api/api.ts\" />\n/// <reference path=\"liveevent/liveevent.ts\" />\n/// <reference path=\"chat/chat.ts\" />\n\nclass Extension {\n  static $http: ng.IHttpService;\n  static $q: ng.IQService;\n  static $timeout: ng.ITimeoutService;\n  static localStorage: ng.local.storage.ILocalStorageService;\n  static $rootScope: ng.IRootScopeService;\n  static config;\n  static io: SocketIOClientStatic;\n  Liveevent: Liveevent.ILiveevent;\n\n  private static _instances: Liveevent.ILiveeventInstances = {};\n\n  constructor($http: ng.IHttpService, $q: ng.IQService, $timeout: ng.ITimeoutService, localStorage: ng.local.storage.ILocalStorageService, $rootScope: ng.IRootScopeService, ApiConfig) {\n    Extension.$http = $http;\n    Extension.$timeout = $timeout;\n    Extension.$q = $q;\n    Extension.localStorage = localStorage;\n    Extension.config = ApiConfig;\n    Extension.$rootScope = $rootScope;\n  }\n\n  init(opts: API.ILiveEmbed): ng.IPromise<Liveevent.ILiveevent> {\n    if (Extension._instances[opts.id]) {\n      return Extension._instances[opts.id];\n    }\n\n    Extension.io = <SocketIOClientStatic>opts.io;\n\n    var liveEvent = new Liveevent.Liveevent();\n    return Extension._instances[opts.id] = liveEvent.init(opts);\n  }\n}\n\nExtension.$inject = ['$http', '$q', '$timeout', 'localStorageService', '$rootScope', 'ApiConfig'];\napp.service('Liveevent', Extension);\n"],"sourceRoot":"/source/"}