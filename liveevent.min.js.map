{"version":3,"sources":["app.ts","engageform/enum.ts","liveevent.js","api/api.ts","liveevent/liveevent.ts","chat/chat.ts","bootstrap.ts","api/iquiz.ts","page/enum.ts","page/isettings.ts","engageform/iengageform.ts","util/event.ts"],"names":["angular","Engageform","app","module","Engageform.Type","Engageform.Mode","Mode","Liveevent","Liveevent.Liveevent","Liveevent.Liveevent.constructor","Liveevent.Liveevent.summaryStatsUnification","_","each","data","answers","answer","Liveevent.Liveevent.getAnswersForSummary","Liveevent.Liveevent.updatePage","this","Extension","Liveevent.Liveevent.removePage","Liveevent.Liveevent.updateQuiz","Liveevent.Liveevent.removeQuiz","Liveevent.Liveevent.initChat","Liveevent.Liveevent.liveStatusEventHandler","then","_this","Liveevent.Liveevent.initSocket","Liveevent.Liveevent.getById","Liveevent.Liveevent.getPageById","$http","get","url","res","indexOf","status","Liveevent.Liveevent.init","Liveevent_1","ChatModule","ChatModule.featuredMessageNotify","ChatModule.updateFeaturedStatus","ChatModule.Chat","ChatModule.Chat.constructor","Chat","ChatModule.Chat.registerUpdateMessageHandler","ChatModule.Chat.login","ChatModule.Chat.logout","ChatModule.Chat.updateChat","ChatModule.Chat.sendMsg","msg","ChatModule.Chat.getRandomColor","ChatModule.Chat.getMsgs","forEach","ChatModule.Chat.handleNewMessageData","forOwn","ChatModule.Chat.initSocket","existingMsg","find","messages","message","existingUser","ChatModule.Chat.init","Extension.constructor","Extension.init","error","opts","$inject","service","Page","Page.CaseType","Page.Type","Type","Util","Util.Event","Util.Event.constructor","Event","Util.Event.listen","Util.Event.unsubscribe","Util.Event.trigger","_i","arguments"],"mappings":"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","file":"liveevent.min.js","sourcesContent":["/// <reference path=\"../typings/tsd.d.ts\" />\n\nvar app = angular.module('4screens.liveevent', ['LocalStorageModule']);","module Engageform {\n  export enum Type {\n    Undefined,\n    Live,\n    Outcome,\n    Poll,\n    Score,\n    Survey\n  }\n\n  export enum Mode {\n    Undefined,\n    Default,\n    Preview,\n    Result,\n    Summary\n  }\n}\n","(function(angular) {\n/// <reference path=\"../typings/tsd.d.ts\" />\nvar app = angular.module('4screens.liveevent', ['LocalStorageModule']);\nvar Engageform;\n(function (Engageform) {\n    (function (Type) {\n        Type[Type[\"Undefined\"] = 0] = \"Undefined\";\n        Type[Type[\"Live\"] = 1] = \"Live\";\n        Type[Type[\"Outcome\"] = 2] = \"Outcome\";\n        Type[Type[\"Poll\"] = 3] = \"Poll\";\n        Type[Type[\"Score\"] = 4] = \"Score\";\n        Type[Type[\"Survey\"] = 5] = \"Survey\";\n    })(Engageform.Type || (Engageform.Type = {}));\n    var Type = Engageform.Type;\n    (function (Mode) {\n        Mode[Mode[\"Undefined\"] = 0] = \"Undefined\";\n        Mode[Mode[\"Default\"] = 1] = \"Default\";\n        Mode[Mode[\"Preview\"] = 2] = \"Preview\";\n        Mode[Mode[\"Result\"] = 3] = \"Result\";\n        Mode[Mode[\"Summary\"] = 4] = \"Summary\";\n    })(Engageform.Mode || (Engageform.Mode = {}));\n    var Mode = Engageform.Mode;\n})(Engageform || (Engageform = {}));\n/// <reference path=\"iliveevent.ts\" />\n/// <reference path=\"iliveevent.ts\" />\nvar Liveevent;\n(function (Liveevent_1) {\n    var Liveevent = (function () {\n        function Liveevent() {\n            this.event = new Util.Event();\n        }\n        Liveevent.prototype.summaryStatsUnification = function (data) {\n            var result = {};\n            result.questionId = data._id;\n            if (data.type === 'rateIt') {\n                result.avg = data.stats.avg;\n                return result;\n            }\n            _.each(data.answers, function (answer) {\n                result[answer._id] = answer.percent;\n            });\n            return result;\n        };\n        ;\n        Liveevent.prototype.getAnswersForSummary = function () {\n            var _this = this;\n            var url = Extension.config.backend.domain + Extension.config.engageform.presentationViewStats;\n            url = url.replace(':questionId', this.activePageId);\n            return Extension.$http.get(url).then(function (res) {\n                if ([200, 304].indexOf(res.status) !== -1) {\n                    return _this.summaryStatsUnification(res.data);\n                }\n                return Extension.$q.reject(res);\n            });\n        };\n        ;\n        Liveevent.prototype.updatePage = function (page) {\n            var _this = this;\n            var __type = this.activePage ? (this.activePage.type + '') : null;\n            // Check if form and if so, send all inputs\n            if (__type && __type.indexOf('form') > -1) {\n                this.currentEngageform.navigation.pick(null, null, { quiet: true });\n            }\n            this.activePage = page;\n            this.activePageId = page._id;\n            this.currentEngageform.message = null;\n            this.currentEngageform.initPage(page);\n            // Add liveSettings\n            this.currentEngageform.liveSettings = page.liveSettings;\n            // Overwrite navigation\n            this.currentEngageform.navigation.enabled = false;\n            this.currentEngageform.navigation.position = 0;\n            this.currentEngageform.navigation.size = 1;\n            this.currentEngageform.navigation.hasStart = false;\n            this.currentEngageform.navigation.enabledStart = false;\n            this.currentEngageform.navigation.hasPrev = false;\n            this.currentEngageform.navigation.enabledPrev = false;\n            this.currentEngageform.navigation.hasNext = false;\n            this.currentEngageform.navigation.enabledNext = false;\n            this.currentEngageform.navigation.hasFinish = false;\n            this.currentEngageform.navigation.enabledFinish = false;\n            this.currentEngageform.navigation.distance = 0;\n            this.currentEngageform.navigation.prev = function ($event) {\n                return;\n            };\n            this.currentEngageform.navigation.next = function ($event, vcase) {\n                return;\n            };\n            this.currentEngageform.navigation.start = function ($event) {\n                return;\n            };\n            this.currentEngageform.navigation.finish = function ($event, vcase) {\n                return;\n            };\n            if (!this.currentEngageform.navigation.truePick) {\n                this.currentEngageform.navigation.truePick = this.currentEngageform.navigation.pick;\n            }\n            // Block pick if answers are not allowed\n            this.currentEngageform.navigation.pick = function (event, page, options) {\n                if (_this.currentEngageform.liveSettings.acceptResponses) {\n                    _this.currentEngageform.navigation.truePick(event, page, options);\n                }\n                else {\n                    _this.currentEngageform.message = 'Answering is disabled at the moment.';\n                }\n            };\n            if (Extension.mode === Engageform.Mode.Summary && this.currentEngageform.current\n                && this.activePageId && _.has(Extension.config, 'engageform.presentationViewStats')) {\n                this.getAnswersForSummary().then(function (answersData) {\n                    _this.currentEngageform.current.updateAnswers(answersData);\n                });\n                this.currentEngageform.liveSettings.showAnswers = true;\n            }\n        };\n        Liveevent.prototype.removePage = function () {\n            var _this = this;\n            return Extension.$timeout(function () {\n                _this.activePage = null;\n                _this.activePageId = null;\n                if (_this.currentEngageform) {\n                    _this.currentEngageform.current = null;\n                    _this.currentEngageform.message = null;\n                }\n            });\n        };\n        Liveevent.prototype.updateQuiz = function (EF) {\n            this.currentEngageform = EF;\n            this.event.trigger('now::changed', EF);\n            if (!this.currentEngageform.navigation.truePick) {\n                this.currentEngageform.navigation.truePick = this.currentEngageform.navigation.pick;\n            }\n            this.activeQuiz = this.currentEngageform;\n            this.activeQuizId = this.currentEngageform._engageformId;\n        };\n        Liveevent.prototype.removeQuiz = function () {\n            var _this = this;\n            return this.removePage().then(function () {\n                return Extension.$timeout(function () {\n                    _this.activeQuiz = null;\n                    _this.activeQuizId = null;\n                    if (_this.currentEngageform) {\n                        _this.currentEngageform.branding = null;\n                        _this.currentEngageform.current = null;\n                        _this.currentEngageform.message = null;\n                        _this.currentEngageform.meta = null;\n                        _this.currentEngageform.navigation = null;\n                        _this.currentEngageform.theme = null;\n                        _this.currentEngageform.title = null;\n                        _this.currentEngageform.type = null;\n                    }\n                    _this.currentEngageform = null;\n                });\n            });\n        };\n        // Init chat\n        Liveevent.prototype.initChat = function (id) {\n            var deferred = Extension.$q.defer();\n            if (!this.chat && id) {\n                this.chat = new ChatModule.Chat(id, this);\n                return this.chat.init();\n            }\n            else {\n                // If it is already initialised (meaning it's available on this instance), return a fake promise that\n                // is here just to make the API looks better.\n                deferred.resolve();\n                return deferred.promise;\n            }\n        };\n        /**\n         * Handler of the \"liveEventStatus\" socket event that manages the active quiz and page.\n         * @param data Data from the event.\n         * @param {API.ILiveEmbed} opts Options provided in the initSocket method.\n         */\n        Liveevent.prototype.liveStatusEventHandler = function (data, opts) {\n            var _this = this;\n            // If the quiz is not active or there's no active quiz, run the deactivation process.\n            if (!data.isActive || !data.activeQuizId) {\n                this.removeQuiz();\n            }\n            else if (!data.activeQuestionId) {\n                this.removePage();\n            }\n            else if (data.activeQuizId !== this.activeQuizId) {\n                this.EF.init({\n                    id: data.activeQuizId,\n                    mode: 'default',\n                    live: true,\n                    callback: { sendAnswerCallback: this.sendAnswerCallback },\n                    embedSettings: this.embedSettings\n                }).then(function (res) {\n                    _this.updateQuiz(res);\n                    _this.getPageById(data.activeQuestionId).then(function (page) {\n                        _this.updatePage(page);\n                    });\n                });\n            }\n            else if (data.activeQuestionId !== this.activePageId) {\n                this.getPageById(data.activeQuestionId).then(function (page) {\n                    _this.updatePage(page);\n                });\n            }\n            // Change the current form settings if applies.\n            Extension.$timeout(function () {\n                if (_this.currentEngageform) {\n                    _this.currentEngageform.liveSettings.showAnswers = data.showAnswers;\n                    _this.currentEngageform.liveSettings.acceptResponses = data.acceptResponses;\n                }\n            });\n            // Run the callback.\n            if (opts.callback && opts.callback.liveEventStatus) {\n                data.id = opts.id;\n                opts.callback.liveEventStatus(data);\n            }\n        };\n        // Sockets\n        Liveevent.prototype.initSocket = function (opts) {\n            var _this = this;\n            var url = Extension.config.backend.socket + Extension.config.liveEvent.socketNamespace;\n            url = url.replace(':liveEventId', opts.id);\n            // Create callback object if not provided.\n            opts.callback = opts.callback || {};\n            // Connect to the socket.\n            this.socket = Extension.io.connect(url, { forceNew: true });\n            this.socket.on('liveEventStatus', function (data) {\n                _this.liveStatusEventHandler(data, opts);\n            });\n            this.socket.on('connect', function () {\n                _this.socket.emit('getStatus', { liveEventId: opts.id });\n            });\n            this.socket.on('disconnect', this.initSocket);\n            this.socket.on('error', function (res) {\n                console.warn('[ Liveevent:Socket ] Error: ' + res);\n            });\n            this.socket.on('reconnecting', function () {\n                console.warn('[ Liveevent:Socket ] Reconnecting');\n            });\n            this.socket.on('reconnect_failed', function () {\n                console.warn('[ Liveevent:Socket ] Reconnect failed');\n            });\n            this.socket.on('reconnect', function () {\n                _this.socket.emit('getStatus', { liveEventId: opts.id });\n            });\n            this.socket.on('rateItQuestionStatus', function (data) {\n                _this.currentEngageform.current.updateAnswers(data);\n            });\n            this.socket.on('multipleChoiceQuestionAnswers', function (data) {\n                _this.currentEngageform.current.updateAnswers(data);\n            });\n            // Buzzer listening\n            this.socket.on('buzzerQuestionStatus', function (data) {\n                // Run callback\n                if (opts.callback.buzzerQuestionStatus) {\n                    data.id = opts.id;\n                    opts.callback.buzzerQuestionStatus(data);\n                }\n            });\n        };\n        // Get Liveevent\n        Liveevent.prototype.getById = function (id) {\n            var url = Extension.config.backend.domain + Extension.config.liveEvent.liveEventUrl;\n            url = url.replace(':liveEventId', id);\n            // TODO: Get quiz and current question\n            return Extension.$http.get(url).then(function (res) {\n                if ([200, 304].indexOf(res.status) !== -1) {\n                    return res.data;\n                }\n                return Extension.$q.reject(res);\n            });\n        };\n        // Get Page\n        Liveevent.prototype.getPageById = function (questionId) {\n            var url = Extension.config.backend.domain + Extension.config.liveEvent.activeQuestion;\n            url = url.replace(':questionId', questionId);\n            return Extension.$http.get(url).then(function (res) {\n                if ([200, 304].indexOf(res.status) !== -1) {\n                    return res.data;\n                }\n                this.$q.reject(res);\n            });\n        };\n        Liveevent.prototype.init = function (opts) {\n            var _this = this;\n            var deferred = Extension.$q.defer();\n            this.embedSettings = opts.embedSettings;\n            this.id = opts.id;\n            this.EF = opts.engageform;\n            this.sendAnswerCallback = opts.callback.sendAnswerCallback;\n            // Get Liveevent\n            this.getById(opts.id).then(function (res) {\n                // Init socket\n                _this.initSocket(opts);\n                // Init chat\n                _this.initChat(res.chatId).then(function () {\n                    // ...\n                });\n                deferred.resolve(_this);\n            });\n            return deferred.promise;\n        };\n        return Liveevent;\n    })();\n    Liveevent_1.Liveevent = Liveevent;\n})(Liveevent || (Liveevent = {}));\n/// <reference path=\"./ichat.ts\" />\nvar ChatModule;\n(function (ChatModule) {\n    function featuredMessageNotify(oldValue, newValue, message) {\n        this._liveevent.event.trigger('chat::messageFeatureStatusChanged', this._liveevent.id, message, newValue);\n        return message;\n    }\n    function updateFeaturedStatus(oldValue, newValue, message) {\n        message.featured = newValue;\n        return message;\n    }\n    var Chat = (function () {\n        function Chat(id, liveevent) {\n            this.messages = [];\n            this.updateMessageHandlers = {};\n            this.id = id;\n            this._liveevent = liveevent;\n            // Feature status handlers\n            this.registerUpdateMessageHandler('featured', updateFeaturedStatus);\n            this.registerUpdateMessageHandler('featured', featuredMessageNotify);\n        }\n        /**\n         * Registers handlers that will be invoked and will potentially modify the message on its data update.\n         * @param field\n         * @param handler\n         */\n        Chat.prototype.registerUpdateMessageHandler = function (field, handler) {\n            if (!this.updateMessageHandlers[field]) {\n                this.updateMessageHandlers[field] = [];\n            }\n            this.updateMessageHandlers[field].push(handler);\n        };\n        Chat.prototype.login = function (data, dataMe) {\n            this.user = {\n                accessToken: data.accessToken,\n                user: data.userID,\n                userLink: dataMe.link,\n                userName: dataMe.name,\n                userID: data.userID\n            };\n        };\n        Chat.prototype.logout = function () {\n            this.user = null;\n        };\n        Chat.prototype.updateChat = function (data) {\n            this.id = data.id;\n            this.name = data.name;\n            this.premoderated = data.premoderated;\n            this.direction = data.chatDirection;\n            this.theme = data.theme;\n            // Get some old msgs\n            if (this._liveevent.activeQuiz) {\n                this.getMsgs();\n            }\n            else {\n                this.messages = [];\n            }\n        };\n        Chat.prototype.sendMsg = function (m) {\n            if (!this.user)\n                return;\n            var url = Extension.config.backend.domain + Extension.config.chat.sendUrl, msg;\n            url = url.replace(':chatId', this.id);\n            msg = {\n                accessToken: this.user.accessToken,\n                date: Date.now(),\n                hidden: false,\n                eventId: this._liveevent.activeQuiz._engageformId,\n                id: this.user.userId,\n                msg: m,\n                user: this.user.user,\n                userLink: this.user.userLink,\n                userName: this.user.userName\n            };\n            return Extension.$http.post(url, msg);\n        };\n        Chat.prototype.getRandomColor = function () {\n            var letters = '0123456789ABCDEF';\n            var color = '#';\n            for (var i = 0; i < 6; i++) {\n                color += letters[Math.floor(Math.random() * 16)];\n            }\n            return color;\n        };\n        Chat.prototype.getMsgs = function () {\n            var _this = this;\n            var url = Extension.config.backend.domain + Extension.config.chat.messagesUrl + '/100/' + this._liveevent.activeQuiz._engageformId;\n            url = url.replace(':chatId', this.id);\n            return Extension.$http.get(url).then(function (res) {\n                _this.messages = res.data;\n                if (_this.messages.length) {\n                    // Sort by newest\n                    _this.messages = _.sortBy(_this.messages, 'date').reverse();\n                    // Reverse msg order\n                    if (_this.direction && _this.direction === 'ttb') {\n                        _this.messages.reverse();\n                    }\n                    // Generate colors for User Avatar\n                    var colors = {};\n                    _this.messages = _this.messages.map(function (msg) {\n                        if (colors.hasOwnProperty(msg.userName)) {\n                            msg.avatarColor = colors[msg.userName];\n                        }\n                        else {\n                            var color = _this.getRandomColor();\n                            colors[msg.userName] = color;\n                            msg.avatarColor = color;\n                        }\n                        return msg;\n                    });\n                }\n                _.forEach(_this.messages, function (message) {\n                    _this._liveevent.event.trigger('chat::message', _this._liveevent.id, message);\n                });\n            });\n        };\n        /**\n         * Handles updates of a message data, delegating data to handler functions.\n         * @param message\n         * @param newData\n         * @returns {IMessage}\n         */\n        Chat.prototype.handleNewMessageData = function (message, newData) {\n            var _this = this;\n            _.forOwn(newData, function (value, field) {\n                // When the value is different than it was before and there are handlers defined, call them.\n                if (value !== message[field] && _.isArray(_this.updateMessageHandlers[field])) {\n                    var oldValue = message[field];\n                    _.forEach(_this.updateMessageHandlers[field], function (handler) {\n                        handler.call(_this, oldValue, value, message);\n                    });\n                }\n            });\n            return message;\n        };\n        Chat.prototype.initSocket = function () {\n            var _this = this;\n            var url = Extension.config.backend.socket;\n            this.socket = Extension.io.connect(url, { forceNew: true });\n            this.socket.on('error', function (res) {\n                console.warn(res);\n            });\n            this.socket.on('connect', function (data) {\n                // Join room\n                _this.socket.emit('joinRoom', _this.id);\n                // We can also leave room, to do so just emit 'leaveRoom' with roomId as param\n            });\n            // New msg event\n            this.socket.on('msg', function (data) {\n                // \"msg\" event is triggered not only when new message arrives, but also a message changes.\n                var existingMsg = _.find(_this.messages, function (message) {\n                    return message.id === data.id;\n                });\n                var existingUser = _.find(_this.messages, function (message) {\n                    return message.userName === data.userName;\n                });\n                data.avatarColor = existingUser ? existingUser.avatarColor : _this.getRandomColor();\n                Extension.$rootScope.$apply(function () {\n                    if (existingMsg) {\n                        _this.handleNewMessageData(existingMsg, data);\n                    }\n                    else {\n                        if (_this.direction && _this.direction === 'ttb') {\n                            _this.messages.push(data);\n                        }\n                        else {\n                            _this.messages.unshift(data);\n                        }\n                    }\n                });\n                if (!existingMsg) {\n                    _this._liveevent.event.trigger('chat::message', _this._liveevent.id, data);\n                }\n            });\n            this.socket.on('msgHide', function (id) {\n                _this._liveevent.event.trigger('chat::hideMessage', id);\n                var messageIndex = _this.messages.length;\n                for (var i = 0; i < _this.messages.length; i += 1) {\n                    if (_this.messages[i].id === id) {\n                        messageIndex = i;\n                    }\n                }\n                Extension.$rootScope.$apply(function () {\n                    _this.messages.splice(messageIndex, 1);\n                });\n            });\n            // On disconect\n            this.socket.on('disconnect', this.initSocket);\n        };\n        Chat.prototype.init = function () {\n            var _this = this;\n            // Get chat details\n            var url = Extension.config.backend.domain + Extension.config.chat.detailUrl;\n            url = url.replace(':chatId', this.id);\n            return Extension.$http.get(url).then(function (res) {\n                _this.updateChat(res.data);\n                _this.initSocket();\n                return res;\n            });\n        };\n        return Chat;\n    })();\n    ChatModule.Chat = Chat;\n})(ChatModule || (ChatModule = {}));\n/// <reference path=\"../typings/tsd.d.ts\" />\n/// <reference path=\"./engageform/enum.ts\" />\n/// <reference path=\"./api/api.ts\" />\n/// <reference path=\"./liveevent/liveevent.ts\" />\n/// <reference path=\"./chat/chat.ts\" />\nvar Extension = (function () {\n    function Extension($http, $q, $timeout, localStorage, $rootScope, ApiConfig) {\n        Extension.$http = $http;\n        Extension.$timeout = $timeout;\n        Extension.$q = $q;\n        Extension.localStorage = localStorage;\n        Extension.config = ApiConfig;\n        Extension.$rootScope = $rootScope;\n    }\n    Extension.prototype.init = function (opts) {\n        if (Extension._instances[opts.id]) {\n            return Extension._instances[opts.id];\n        }\n        Extension.io = opts.io;\n        switch (opts.mode) {\n            case 'summary':\n                Extension.mode = Engageform.Mode.Summary;\n                break;\n            case 'default':\n            case '':\n            case undefined:\n                Extension.mode = Engageform.Mode.Default;\n                break;\n            default:\n                return Extension.$q.reject({\n                    status: 'error',\n                    error: {\n                        code: 406,\n                        message: 'Mode property not supported.'\n                    },\n                    data: opts\n                });\n        }\n        var liveEvent = new Liveevent.Liveevent();\n        if (!opts.callback) {\n            opts.callback = {\n                sendAnswerCallback: function () { }\n            };\n        }\n        else if (!opts.callback.sendAnswerCallback) {\n            opts.callback.sendAnswerCallback = function () { };\n        }\n        return Extension._instances[opts.id] = liveEvent.init(opts);\n    };\n    Extension.mode = Engageform.Mode.Undefined;\n    Extension._instances = {};\n    return Extension;\n})();\nExtension.$inject = ['$http', '$q', '$timeout', 'localStorageService', '$rootScope', 'ApiConfig'];\napp.service('Liveevent', Extension);\n/// <reference path=\"../branding/ibranding.ts\" />\nvar Page;\n(function (Page) {\n    (function (CaseType) {\n        CaseType[CaseType[\"Undefined\"] = 0] = \"Undefined\";\n        CaseType[CaseType[\"Image\"] = 1] = \"Image\";\n        CaseType[CaseType[\"Input\"] = 2] = \"Input\";\n        CaseType[CaseType[\"Iteration\"] = 3] = \"Iteration\";\n        CaseType[CaseType[\"Text\"] = 4] = \"Text\";\n    })(Page.CaseType || (Page.CaseType = {}));\n    var CaseType = Page.CaseType;\n    (function (Type) {\n        Type[Type[\"Undefined\"] = 0] = \"Undefined\";\n        Type[Type[\"EndPage\"] = 1] = \"EndPage\";\n        Type[Type[\"Form\"] = 2] = \"Form\";\n        Type[Type[\"MultiChoice\"] = 3] = \"MultiChoice\";\n        Type[Type[\"PictureChoice\"] = 4] = \"PictureChoice\";\n        Type[Type[\"Rateit\"] = 5] = \"Rateit\";\n        Type[Type[\"StartPage\"] = 6] = \"StartPage\";\n        Type[Type[\"Buzzer\"] = 7] = \"Buzzer\";\n        Type[Type[\"Poster\"] = 8] = \"Poster\";\n    })(Page.Type || (Page.Type = {}));\n    var Type = Page.Type;\n})(Page || (Page = {}));\nvar Page;\n(function (Page) {\n    ;\n})(Page || (Page = {}));\n///<reference path=\"../page/ipage.ts\"/>\n/// <reference path=\"api/iembed.ts\" />\n/// <reference path=\"api/iquizquestion.ts\" />\n/// <reference path=\"api/iquizquestionsres.ts\" />\n/// <reference path=\"api/iquizquestionanswer.ts\" />\n/// <reference path=\"api/iquizquestionanswerres.ts\" />\n/// <reference path=\"api/iquiz.ts\" />\n/// <reference path=\"api/iquizres.ts\" />\n/// <reference path=\"api/iquizfinish.ts\" />\n/// <reference path=\"api/iquizfinishres.ts\" />\n/// <reference path=\"page/enum.ts\" />\n/// <reference path=\"page/icase.ts\" />\n/// <reference path=\"page/ipage.ts\" />\n/// <reference path=\"page/ipages.ts\" />\n/// <reference path=\"page/ipagesent.ts\" />\n/// <reference path=\"page/isettings.ts\" />\n/// <reference path=\"engageform/enum.ts\" />\n/// <reference path=\"engageform/iengageform.ts\" />\n/// <reference path=\"engageform/isettings.ts\" />\n/// <reference path=\"engageform/itheme.ts\" />\n/// <reference path=\"engageform/itabs.ts\" />\n/// <reference path=\"branding/ibranding.ts\" />\n/// <reference path=\"navigation/inavigation.ts\" /> \n/*!\n * 4screens-angular-liveevent v0.2.6\n * (c) 2015 Nopattern sp. z o.o.\n * License: proprietary\n */\nvar Util;\n(function (Util) {\n    var Event = (function () {\n        function Event() {\n            this._listener = {};\n        }\n        /**\n         * Register callback for given event.\n         *\n         * @param {String} event\n         * @param {Function} callback\n         */\n        Event.prototype.listen = function (event, callback) {\n            if (!this._listener[event]) {\n                this._listener[event] = [];\n            }\n            this._listener[event].push(callback);\n        };\n        /**\n         * Removes one or all calbacks from the registered listeners.\n         *\n         * @param {String} event\n         * @param {Function} callback\n           */\n        Event.prototype.unsubscribe = function (event, callback) {\n            if (this._listener[event]) {\n                if (!callback) {\n                    this._listener[event].length = 0;\n                }\n                else {\n                    _.pull(this._listener[event], callback);\n                }\n            }\n        };\n        /**\n         * Fire event with given arguments.\n         *\n         * @param {string} event\n         * @param {args...} data\n         */\n        Event.prototype.trigger = function (event) {\n            var data = [];\n            for (var _i = 1; _i < arguments.length; _i++) {\n                data[_i - 1] = arguments[_i];\n            }\n            var args = Array.apply(null, arguments).slice(1);\n            var listeners = this._listener[event];\n            if (!listeners) {\n                return;\n            }\n            for (var i = 0; i < listeners.length; i++) {\n                listeners[i].apply(null, args);\n            }\n        };\n        return Event;\n    })();\n    Util.Event = Event;\n})(Util || (Util = {}));\n})(angular);\n\n","/// <reference path=\"iliveevent.ts\" />\n","/// <reference path=\"iliveevent.ts\" />\n\nmodule Liveevent {\n  interface summaryStatData {\n    questionId: string;\n    avg: number;\n  }\n\n  export class Liveevent implements ILiveevent {\n    enabled: boolean;\n    id: string;\n    title: string;\n\n    activePage: Page.IPage;\n    activeQuiz: Engageform.IEngageform;\n    activePageId: string;\n    activeQuizId: string;\n    socket: SocketIOClient.Socket;\n    EF: Engageform.IEngageform;\n    chat: ChatModule.IChat;\n    currentEngageform: Engageform.IEngageform;\n    sendAnswerCallback: API.answerCallback;\n\n    // Embed settings are stored on the instance since it's needed much after the initialisation.\n    embedSettings: API.IEmbedSettings;\n\n    event: Util.Event;\n\n    constructor() {\n      this.event = new Util.Event();\n    }\n\n    private summaryStatsUnification(data): summaryStatData {\n      var result = <summaryStatData>{};\n\n      result.questionId = data._id;\n\n      if (data.type === 'rateIt') {\n        result.avg = data.stats.avg;\n\n        return result;\n      }\n\n      _.each(data.answers, function (answer: { percent: number, _id: string }) {\n        result[answer._id] = answer.percent;\n      });\n\n      return result;\n    };\n\n    private getAnswersForSummary(): ng.IPromise<any> {\n      var url = Extension.config.backend.domain + Extension.config.engageform.presentationViewStats;\n      url = url.replace(':questionId', this.activePageId);\n\n      return Extension.$http.get(url).then((res) => {\n        if ([200, 304].indexOf(res.status) !== -1) {\n          return this.summaryStatsUnification(res.data);\n        }\n\n        return Extension.$q.reject(res);\n      });\n    };\n\n    private updatePage(page: Page.IPage) {\n      var __type = this.activePage ? (this.activePage.type + '') : null;\n\n      // Check if form and if so, send all inputs\n      if (__type && __type.indexOf('form') > -1) {\n        this.currentEngageform.navigation.pick(null, null, {quiet: true});\n      }\n\n      this.activePage = page;\n      this.activePageId = page._id;\n\n      this.currentEngageform.message = null;\n      this.currentEngageform.initPage(page);\n\n      // Add liveSettings\n      this.currentEngageform.liveSettings = <Page.ILiveSetting>page.liveSettings;\n\n      // Overwrite navigation\n      this.currentEngageform.navigation.enabled = false;\n      this.currentEngageform.navigation.position = 0;\n      this.currentEngageform.navigation.size = 1;\n      this.currentEngageform.navigation.hasStart = false;\n      this.currentEngageform.navigation.enabledStart = false;\n      this.currentEngageform.navigation.hasPrev = false;\n      this.currentEngageform.navigation.enabledPrev = false;\n      this.currentEngageform.navigation.hasNext = false;\n      this.currentEngageform.navigation.enabledNext = false;\n      this.currentEngageform.navigation.hasFinish = false;\n      this.currentEngageform.navigation.enabledFinish = false;\n      this.currentEngageform.navigation.distance = 0;\n      this.currentEngageform.navigation.prev = ($event) => {\n        return;\n      };\n      this.currentEngageform.navigation.next = ($event, vcase: Page.ICase) => {\n        return;\n      };\n      this.currentEngageform.navigation.start = ($event) => {\n        return;\n      };\n      this.currentEngageform.navigation.finish = ($event, vcase: Page.ICase) => {\n        return;\n      };\n\n      if (!this.currentEngageform.navigation.truePick) {\n        this.currentEngageform.navigation.truePick = this.currentEngageform.navigation.pick;\n      }\n\n      // Block pick if answers are not allowed\n      this.currentEngageform.navigation.pick = (event, page: Page.ICase, options?) => {\n        if (this.currentEngageform.liveSettings.acceptResponses) {\n          this.currentEngageform.navigation.truePick(event, page, options);\n        } else {\n          this.currentEngageform.message = 'Answering is disabled at the moment.';\n        }\n      };\n\n      if (Extension.mode === Engageform.Mode.Summary && this.currentEngageform.current\n        && this.activePageId && _.has(Extension.config, 'engageform.presentationViewStats')) {\n        this.getAnswersForSummary().then((answersData) => {\n          this.currentEngageform.current.updateAnswers(answersData);\n        });\n\n        this.currentEngageform.liveSettings.showAnswers = true;\n      }\n    }\n\n    private removePage() {\n      return Extension.$timeout(() => {\n        this.activePage = null;\n        this.activePageId = null;\n\n        if (this.currentEngageform) {\n          this.currentEngageform.current = null;\n          this.currentEngageform.message = null;\n        }\n      });\n    }\n\n    private updateQuiz(EF) {\n      this.currentEngageform = EF;\n\n      this.event.trigger('now::changed', EF);\n\n      if (!this.currentEngageform.navigation.truePick) {\n        this.currentEngageform.navigation.truePick = this.currentEngageform.navigation.pick;\n      }\n\n      this.activeQuiz = this.currentEngageform;\n      this.activeQuizId = this.currentEngageform._engageformId;\n    }\n\n    private removeQuiz() {\n      return this.removePage().then(() => {\n        return Extension.$timeout(() => {\n          this.activeQuiz = null;\n          this.activeQuizId = null;\n\n          if (this.currentEngageform) {\n            this.currentEngageform.branding = null;\n            this.currentEngageform.current = null;\n            this.currentEngageform.message = null;\n            this.currentEngageform.meta = null;\n            this.currentEngageform.navigation = null;\n            this.currentEngageform.theme = null;\n            this.currentEngageform.title = null;\n            this.currentEngageform.type = null;\n          }\n\n          this.currentEngageform = null;\n        });\n      });\n\n    }\n\n    // Init chat\n    private initChat(id: string): ng.IPromise<any> {\n      var deferred = Extension.$q.defer();\n\n      if (!this.chat && id) {\n        this.chat = new ChatModule.Chat(id, this);\n\n        return this.chat.init();\n      } else {\n        // If it is already initialised (meaning it's available on this instance), return a fake promise that\n        // is here just to make the API looks better.\n        deferred.resolve();\n        return deferred.promise;\n      }\n    }\n\n    /**\n     * Handler of the \"liveEventStatus\" socket event that manages the active quiz and page.\n     * @param data Data from the event.\n     * @param {API.ILiveEmbed} opts Options provided in the initSocket method.\n     */\n    liveStatusEventHandler(data, opts: API.ILiveEmbed) {\n      // If the quiz is not active or there's no active quiz, run the deactivation process.\n      if (!data.isActive || !data.activeQuizId) {\n        this.removeQuiz();\n\n        // No questions provided in the data? Deactivate the page.\n      } else if (!data.activeQuestionId) {\n        this.removePage();\n\n        // Quiz changed, so initialise another form.\n      } else if (data.activeQuizId !== this.activeQuizId) {\n        this.EF.init({\n          id: data.activeQuizId,\n          mode: 'default',\n          live: true,\n          callback: {sendAnswerCallback: this.sendAnswerCallback},\n          embedSettings: this.embedSettings\n        }).then((res) => {\n          this.updateQuiz(res);\n          this.getPageById(data.activeQuestionId).then((page: Page.IPage) => {\n            this.updatePage(page);\n          });\n        });\n\n        // Question changed, so go to another page.\n      } else if (data.activeQuestionId !== this.activePageId) {\n        this.getPageById(data.activeQuestionId).then((page: Page.IPage) => {\n          this.updatePage(page);\n        });\n      }\n\n      // Change the current form settings if applies.\n      Extension.$timeout(() => {\n        if (this.currentEngageform) {\n          this.currentEngageform.liveSettings.showAnswers = data.showAnswers;\n          this.currentEngageform.liveSettings.acceptResponses = data.acceptResponses;\n        }\n      });\n\n      // Run the callback.\n      if (opts.callback && opts.callback.liveEventStatus) {\n        data.id = opts.id;\n        opts.callback.liveEventStatus(data);\n      }\n    }\n\n    // Sockets\n    private initSocket(opts: API.ILiveEmbed) {\n      var url = Extension.config.backend.socket + Extension.config.liveEvent.socketNamespace;\n      url = url.replace(':liveEventId', opts.id);\n\n      // Create callback object if not provided.\n      opts.callback = opts.callback || {};\n\n      // Connect to the socket.\n      this.socket = Extension.io.connect(url, {forceNew: true});\n\n      this.socket.on('liveEventStatus', data => {\n        this.liveStatusEventHandler(data, opts);\n      });\n\n      this.socket.on('connect', () => {\n        this.socket.emit('getStatus', {liveEventId: opts.id});\n      });\n\n      this.socket.on('disconnect', this.initSocket);\n\n      this.socket.on('error', (res) => {\n        console.warn('[ Liveevent:Socket ] Error: ' + res);\n      });\n\n      this.socket.on('reconnecting', () => {\n        console.warn('[ Liveevent:Socket ] Reconnecting');\n      });\n\n      this.socket.on('reconnect_failed', () => {\n        console.warn('[ Liveevent:Socket ] Reconnect failed');\n      });\n\n      this.socket.on('reconnect', () => {\n        this.socket.emit('getStatus', {liveEventId: opts.id});\n      });\n\n      this.socket.on('rateItQuestionStatus', (data) => {\n        this.currentEngageform.current.updateAnswers(data);\n      });\n\n      this.socket.on('multipleChoiceQuestionAnswers', (data) => {\n        this.currentEngageform.current.updateAnswers(data);\n      });\n\n      // Buzzer listening\n      this.socket.on('buzzerQuestionStatus', (data) => {\n        // Run callback\n        if (opts.callback.buzzerQuestionStatus) {\n          data.id = opts.id;\n          opts.callback.buzzerQuestionStatus(data);\n        }\n      });\n    }\n\n    // Get Liveevent\n    getById(id: string): ng.IPromise<ILiveeventResponse> {\n      var url = Extension.config.backend.domain + Extension.config.liveEvent.liveEventUrl;\n      url = url.replace(':liveEventId', id);\n\n      // TODO: Get quiz and current question\n      return Extension.$http.get(url).then((res) => {\n        if ([200, 304].indexOf(res.status) !== -1) {\n          return res.data;\n        }\n\n        return Extension.$q.reject(res);\n      });\n    }\n\n    // Get Page\n    private getPageById(questionId: string) {\n      var url = Extension.config.backend.domain + Extension.config.liveEvent.activeQuestion;\n      url = url.replace(':questionId', questionId);\n\n      return Extension.$http.get(url).then(function (res) {\n\n        if ([200, 304].indexOf(res.status) !== -1) {\n          return res.data;\n        }\n\n        this.$q.reject(res);\n      });\n    }\n\n    init(opts: API.ILiveEmbed) {\n      var deferred = Extension.$q.defer();\n\n      this.embedSettings = opts.embedSettings;\n      this.id = opts.id;\n      this.EF = opts.engageform;\n      this.sendAnswerCallback = opts.callback.sendAnswerCallback;\n\n      // Get Liveevent\n      this.getById(opts.id).then((res) => {\n        // Init socket\n        this.initSocket(opts);\n\n        // Init chat\n        this.initChat(res.chatId).then(() => {\n          // ...\n        });\n        deferred.resolve(this);\n      });\n\n      return deferred.promise;\n    }\n  }\n}\n","/// <reference path=\"./ichat.ts\" />\n\nmodule ChatModule {\n  function featuredMessageNotify(oldValue, newValue, message) {\n    this._liveevent.event.trigger('chat::messageFeatureStatusChanged', this._liveevent.id, message, newValue);\n    return message;\n  }\n\n  function updateFeaturedStatus(oldValue, newValue, message) {\n    message.featured = newValue;\n    return message;\n  }\n\n  export class Chat implements IChat {\n    id: string;\n    name: string;\n    premoderated: boolean;\n    direction: string;\n    theme: ITheme;\n\n    socket: SocketIOClient.Socket;\n    messages: IMessage[] = [];\n    user: IUser;\n    status: boolean;\n\n    private _liveevent: Liveevent.ILiveevent;\n\n    private updateMessageHandlers = {};\n\n    /**\n     * Registers handlers that will be invoked and will potentially modify the message on its data update.\n     * @param field\n     * @param handler\n     */\n    private registerUpdateMessageHandler(field: string, handler: (oldValue: any, newValue: any, message: IMessage) => IMessage) {\n      if (!this.updateMessageHandlers[field]) {\n        this.updateMessageHandlers[field] = [];\n      }\n\n      this.updateMessageHandlers[field].push(handler);\n    }\n\n    constructor(id: string, liveevent: Liveevent.ILiveevent) {\n      this.id = id;\n      this._liveevent = liveevent;\n\n      // Feature status handlers\n      this.registerUpdateMessageHandler('featured', updateFeaturedStatus);\n      this.registerUpdateMessageHandler('featured', featuredMessageNotify);\n    }\n\n    private login(data: IFbAuth, dataMe: any) { // FIXME: dateMe FB interface (v2.3 or 2.2) ?\n      this.user = {\n        accessToken: data.accessToken,\n        user: data.userID,\n        userLink: dataMe.link,\n        userName: dataMe.name,\n        userID: data.userID\n      };\n    }\n\n    private logout():void {\n      this.user = null;\n    }\n\n    private updateChat(data) {\n      this.id = data.id;\n      this.name = data.name;\n      this.premoderated = data.premoderated;\n      this.direction = data.chatDirection;\n      this.theme = data.theme;\n\n      // Get some old msgs\n      if(this._liveevent.activeQuiz ){\n        this.getMsgs();\n      }else{\n        this.messages = <IMessage[]>[];\n      }\n\n\n    }\n\n    private sendMsg(m: IMessage) {\n      if (!this.user) return;\n\n      var url = Extension.config.backend.domain + Extension.config.chat.sendUrl, msg;\n      url = url.replace(':chatId', this.id);\n\n      msg = {\n        accessToken: this.user.accessToken,\n        date: Date.now(),\n        hidden: false,\n        eventId: this._liveevent.activeQuiz._engageformId,\n        id: this.user.userId,\n        msg: m,\n        user: this.user.user,\n        userLink: this.user.userLink,\n        userName: this.user.userName\n      };\n\n      return Extension.$http.post(url, msg);\n    }\n\n    private getRandomColor() {\n      var letters = '0123456789ABCDEF';\n      var color = '#';\n      for (var i = 0; i < 6; i++) {\n        color += letters[Math.floor(Math.random() * 16)];\n      }\n      return color;\n    }\n\n    private getMsgs() {\n      var url = Extension.config.backend.domain + Extension.config.chat.messagesUrl+'/100/'+this._liveevent.activeQuiz._engageformId\n      url = url.replace(':chatId', this.id);\n      return Extension.$http.get(url).then((res) => {\n        this.messages = <IMessage[]>res.data;\n\n        if (this.messages.length) {\n          // Sort by newest\n          this.messages = _.sortBy(this.messages, 'date').reverse();\n\n          // Reverse msg order\n          if (this.direction && this.direction === 'ttb') {\n            this.messages.reverse();\n          }\n\n          // Generate colors for User Avatar\n          var colors: { [key:string]: string } = {};\n          this.messages = this.messages.map((msg: IMessage) => {\n            if (colors.hasOwnProperty(msg.userName)) {\n              msg.avatarColor = colors[msg.userName];\n            } else {\n              var color = this.getRandomColor();\n              colors[msg.userName] = color;\n              msg.avatarColor = color;\n            }\n            return msg;\n          });\n        }\n\n        _.forEach(this.messages, (message) => {\n          this._liveevent.event.trigger('chat::message', this._liveevent.id, message);\n        })\n      });\n    }\n\n    /**\n     * Handles updates of a message data, delegating data to handler functions.\n     * @param message\n     * @param newData\n     * @returns {IMessage}\n     */\n    private handleNewMessageData(message: IMessage, newData: IMessage) {\n      _.forOwn(newData, (value, field) => {\n        // When the value is different than it was before and there are handlers defined, call them.\n        if (value !== message[field] && _.isArray(this.updateMessageHandlers[field])) {\n          var oldValue = message[field];\n          _.forEach(this.updateMessageHandlers[field], (handler) => {\n            handler.call(this, oldValue, value, message);\n          })\n        }\n      });\n\n      return message;\n    }\n\n    private initSocket() {\n      var url = Extension.config.backend.socket;\n\n      this.socket = Extension.io.connect(url, { forceNew: true });\n\n      this.socket.on('error', (res) => {\n        console.warn(res);\n      });\n\n      this.socket.on('connect', (data) => {\n        // Join room\n        this.socket.emit('joinRoom', this.id);\n        // We can also leave room, to do so just emit 'leaveRoom' with roomId as param\n      });\n\n      // New msg event\n      this.socket.on('msg', (data) => {\n        // \"msg\" event is triggered not only when new message arrives, but also a message changes.\n        var existingMsg = _.find(this.messages, function(message) {\n          return message.id === data.id;\n        });\n\n        var existingUser = _.find(this.messages, function(message) {\n          return message.userName === data.userName;\n        });\n        data.avatarColor = existingUser ? existingUser.avatarColor : this.getRandomColor();\n\n        Extension.$rootScope.$apply(() => {\n          if (existingMsg) {\n            this.handleNewMessageData(existingMsg, data);\n          } else {\n            if (this.direction && this.direction === 'ttb') {\n              this.messages.push(<IMessage>data);\n            } else {\n              this.messages.unshift(<IMessage>data);\n            }\n          }\n        });\n\n        if (!existingMsg) {\n          this._liveevent.event.trigger('chat::message', this._liveevent.id, <IMessage>data);\n        }\n      });\n\n      this.socket.on('msgHide', (id) => {\n        this._liveevent.event.trigger('chat::hideMessage', id);\n\n        var messageIndex = this.messages.length;\n\n        for (var i = 0; i < this.messages.length; i += 1) {\n          if (this.messages[i].id === id) {\n            messageIndex = i;\n          }\n        }\n\n        Extension.$rootScope.$apply(() => {\n          this.messages.splice(messageIndex, 1);\n        });\n      });\n\n      // On disconect\n      this.socket.on('disconnect', this.initSocket);\n    }\n\n    init():ng.IPromise<IChatResponse> {\n      // Get chat details\n      var url = Extension.config.backend.domain + Extension.config.chat.detailUrl;\n      url = url.replace(':chatId', this.id);\n      return Extension.$http.get(url).then((res: IChatResponse) => {\n        this.updateChat(res.data);\n        this.initSocket();\n        return res;\n      });\n    }\n  }\n}\n","/// <reference path=\"../typings/tsd.d.ts\" />\n/// <reference path=\"./engageform/enum.ts\" />\n/// <reference path=\"./api/api.ts\" />\n/// <reference path=\"./liveevent/liveevent.ts\" />\n/// <reference path=\"./chat/chat.ts\" />\n\nclass Extension {\n  static $http: ng.IHttpService;\n  static $q: ng.IQService;\n  static $timeout: ng.ITimeoutService;\n  static localStorage: ng.local.storage.ILocalStorageService;\n  static $rootScope: ng.IRootScopeService;\n  static config;\n  static io: SocketIOClientStatic;\n  static mode: Engageform.Mode = Engageform.Mode.Undefined;\n  Liveevent: Liveevent.ILiveevent;\n\n  private static _instances: Liveevent.ILiveeventInstances = {};\n\n  constructor($http: ng.IHttpService, $q: ng.IQService, $timeout: ng.ITimeoutService, localStorage: ng.local.storage.ILocalStorageService, $rootScope: ng.IRootScopeService, ApiConfig) {\n    Extension.$http = $http;\n    Extension.$timeout = $timeout;\n    Extension.$q = $q;\n    Extension.localStorage = localStorage;\n    Extension.config = ApiConfig;\n    Extension.$rootScope = $rootScope;\n  }\n\n  init(opts: API.ILiveEmbed): ng.IPromise<Liveevent.ILiveevent> {\n    if (Extension._instances[opts.id]) {\n      return Extension._instances[opts.id];\n    }\n\n    Extension.io = <SocketIOClientStatic>opts.io;\n\n    switch (opts.mode) {\n      case 'summary':\n        Extension.mode = Engageform.Mode.Summary;\n        break;\n      case 'default':\n      case '':\n      case undefined:\n        Extension.mode = Engageform.Mode.Default;\n        break;\n      default:\n        return Extension.$q.reject({\n          status: 'error',\n          error: {\n            code: 406,\n            message: 'Mode property not supported.'\n          },\n          data: opts\n        });\n    }\n\n    var liveEvent = new Liveevent.Liveevent();\n\n    if (!opts.callback) {\n      opts.callback = {\n        sendAnswerCallback: function(){}\n      }\n    } else if (!opts.callback.sendAnswerCallback) {\n      opts.callback.sendAnswerCallback = function(){};\n    }\n\n    return Extension._instances[opts.id] = liveEvent.init(opts);\n  }\n}\n\nExtension.$inject = ['$http', '$q', '$timeout', 'localStorageService', '$rootScope', 'ApiConfig'];\napp.service('Liveevent', Extension);\n","/// <reference path=\"../branding/ibranding.ts\" />\n\nmodule API {\n  export interface IQuiz {\n    _id: string;\n    title: string;\n    type: string;\n\n    tabs: {\n      chatTitle: string;\n      liveTitle: string;\n      logoUrl: string;\n    };\n\n    settings: {\n      allowAnswerChange: boolean;\n      branding?: Branding.IBrandingData,\n      share?: {\n        title: string;\n        imageUrl: string;\n        link: string;\n        description: string;\n      }\n    };\n    theme: {\n      answerBackgroundColor: string;\n      answerBorderColor: string;\n      answerColor: string;\n      backgroundBrightness: string;\n      backgroundColor: string;\n      backgroundImageBlur: string;\n      backgroundImageFile: string;\n      backgroundImagePosition: string;\n      buttonColor: string;\n      font: string;\n      questionColor: string;\n      customThemeCssFile: string;\n      tabFontColor: string;\n      tabColor: string;\n      tabBorderColor: string;\n    };\n  }\n}\n","module Page {\n  export enum CaseType {\n    Undefined,\n    Image,\n    Input,\n    Iteration,\n    Text\n  }\n\n  export enum Type {\n    Undefined,\n    EndPage,\n    Form,\n    MultiChoice,\n    PictureChoice,\n    Rateit,\n    StartPage,\n    Buzzer,\n    Poster\n  }\n}\n","module Page {\n  export interface ISetting {\n    showAnswers: boolean;\n    showCorrectAnswer: boolean;\n    showMainMedia: boolean;\n    showDescription: boolean;\n    requiredAnswer: boolean;\n  }\n\n  export interface ILiveSetting {\n      acceptResponses: boolean;\n      showAnswers: boolean;\n  };\n}\n","///<reference path=\"../page/ipage.ts\"/>\n\nmodule Engageform {\n  export interface IEngageform {\n    _engageformId?: string;\n    enabled: boolean;\n    type: Type;\n    title: string;\n    settings: ISetting;\n    theme: ITheme;\n    branding: Branding.IBranding;\n    tabs: ITabs;\n\n    Mode: Engageform.Mode;\n\n    current: Page.IPage;\n    message: string;\n    navigation: Navigation.INavigation;\n\n    meta?: any;\n\n    pages: Page.IPages;\n    startPages: string[];\n    endPages: string[];\n    availablePages: string[];\n    hasForms: boolean;\n\n    liveSettings: Page.ILiveSetting;\n\n    isType(type: Type): boolean;\n    init(opts: API.IEmbed): ng.IPromise<Engageform.IEngageform>;\n\n    initPage(page: Page.IPage): void;\n\n    initPages(): ng.IPromise<IEngageform>;\n    setCurrent(pageId: string);\n    setCurrentEndPage(): ng.IPromise<API.IQuizFinish>;\n  }\n}\n","module Util {\n  export interface IEvent {\n    listen(event: string, callback: any): void;\n    trigger(event: string, ...data: any[]): void;\n    unsubscribe(event: string, callback: any): void;\n  }\n\n  export interface IListenersDictionary {\n    [index: string]: IListener[];\n  }\n\n  export interface IListener {\n    (): void;\n  }\n\n  export class Event implements IEvent {\n    private _listener: IListenersDictionary = {};\n\n    /**\n     * Register callback for given event.\n     *\n     * @param {String} event\n     * @param {Function} callback\n     */\n    listen(event: string, callback: any): void {\n      if (!this._listener[event]) {\n        this._listener[event] = [];\n      }\n\n      this._listener[event].push(callback);\n    }\n\n    /**\n     * Removes one or all calbacks from the registered listeners.\n     *\n     * @param {String} event\n     * @param {Function} callback\n       */\n    unsubscribe(event: string, callback?: any): void {\n      if (this._listener[event]) {\n        if (!callback) {\n          this._listener[event].length = 0;\n        } else {\n          _.pull(this._listener[event], callback);\n        }\n      }\n    }\n\n    /**\n     * Fire event with given arguments.\n     *\n     * @param {string} event\n     * @param {args...} data\n     */\n    trigger(event: string, ...data: any[]): void {\n      var args = Array.apply(null, arguments).slice(1);\n      var listeners = this._listener[event];\n\n      if (!listeners) {\n        return;\n      }\n\n      for (var i=0; i<listeners.length; i++) {\n        listeners[i].apply(null, args);\n      }\n    }\n  }\n}\n"]}